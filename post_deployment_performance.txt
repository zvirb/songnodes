=======================================================
SongNodes Performance Analysis
Timestamp: Wed 20 Aug 2025 23:54:31 AEST
=======================================================
=== SYSTEM INFORMATION ===
CPU: AMD Ryzen 7 7435HS
Cores: 16
Memory: 15Gi

=== GPU ANALYSIS ===
NVIDIA GPU detected:
NVIDIA GeForce RTX 4050 Laptop GPU, 11, 725, 6141, 49, 11.58

GPU Performance Assessment:
⚠️  GPU Utilization LOW: 11% (Target: >50% for ML readiness)
   Opportunity: Significant GPU optimization potential
⚠️  GPU Memory Usage LOW: 11.8%
   Opportunity: Can cache more data in GPU memory

=== SYSTEM RESOURCES ===
Memory Usage:
               total        used        free      shared  buff/cache   available
Mem:            15Gi        12Gi       828Mi       214Mi       2.4Gi       2.7Gi
Swap:          4.0Gi       3.9Gi        54Mi

CPU Usage (5-second sample):
%Cpu(s): 11.0 us,  2.0 sy,  0.0 ni, 86.7 id,  0.0 wa,  0.0 hi,  0.1 si,  0.0 st 

Disk Usage:
/dev/mapper/ubuntu--vg-ubuntu--lv  466G  359G   84G  82% /

Network Interfaces:
    inet 127.0.0.1/8 scope host lo
    inet6 ::1/128 scope host noprefixroute 
    inet 192.168.0.95/24 brd 192.168.0.255 scope global dynamic noprefixroute wlp4s0
    inet6 2001:8003:d86c:eb00:c5a2:f058:5e96:1f14/64 scope global temporary dynamic 
    inet6 2001:8003:d86c:eb00:3ba5:9d61:e148:e06f/64 scope global dynamic mngtmpaddr noprefixroute 
    inet6 fe80::51e6:1e90:8058:edb2/64 scope link noprefixroute 
    inet 172.18.0.1/16 brd 172.18.255.255 scope global br-527b27e2308a
    inet6 fe80::9046:65ff:fe8e:299c/64 scope link 
    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0
    inet6 fe80::186c:81ff:fe3b:e79c/64 scope link 
    inet 172.28.0.1/16 brd 172.28.255.255 scope global musicdb-backend
    inet6 fe80::54ae:89ff:fee5:e590/64 scope link 
    inet 172.19.0.1/16 brd 172.19.255.255 scope global br-075363329e25
    inet6 fe80::a826:1cff:fe7f:6443/64 scope link 
    inet6 fe80::c8ed:91ff:fee4:9a96/64 scope link 
    inet6 fe80::d4e2:53ff:fe93:8677/64 scope link 
    inet6 fe80::8c82:9eff:fe65:dbc1/64 scope link 
    inet6 fe80::24e1:e6ff:fe9a:235/64 scope link 
    inet6 fe80::7082:50ff:fea0:8d36/64 scope link 
    inet6 fe80::2c5a:5cff:fe88:98a4/64 scope link 
    inet6 fe80::7078:5cff:fe88:8921/64 scope link 

=== FRONTEND ANALYSIS ===
✅ Vite development server is running
Vite Process ID: 684222
684223
764322
764323
774667
774668
Vite CPU Usage: 0%
Vite Memory Usage: 0%

Browser Processes:
marku     152274  1.4  2.0 34406544 328928 ?     SLl  11:11  10:51 /opt/google/chrome/chrome
marku     152284  0.0  0.0 33577560 2916 ?       Sl   11:11   0:00 /opt/google/chrome/chrome_crashpad_handler --monitor-self --monitor-self-annotation=ptype=crashpad-handler --database=/home/marku/.config/google-chrome/Crash Reports --metrics-dir=/home/marku/.config/google-chrome --url=https://clients2.google.com/cr/report --annotation=channel= --annotation=lsb-release=Ubuntu 24.04.3 LTS --annotation=plat=Linux --annotation=prod=Chrome_Linux --annotation=ver=139.0.7258.127 --initial-client-fd=5 --shared-client-connection
marku     152286  0.0  0.0 33568324 2344 ?       Sl   11:11   0:00 /opt/google/chrome/chrome_crashpad_handler --no-periodic-tasks --monitor-self-annotation=ptype=crashpad-handler --database=/home/marku/.config/google-chrome/Crash Reports --url=https://clients2.google.com/cr/report --annotation=channel= --annotation=lsb-release=Ubuntu 24.04.3 LTS --annotation=plat=Linux --annotation=prod=Chrome_Linux --annotation=ver=139.0.7258.127 --initial-client-fd=4 --shared-client-connection
marku     152292  0.0  0.0 34214572 6060 ?       S    11:11   0:00 /opt/google/chrome/chrome --type=zygote --no-zygote-sandbox --crashpad-handler-pid=152284 --enable-crash-reporter=6576d338-8f16-4bc6-8a4b-81a751e9a13e, --change-stack-guard-on-fork=enable
marku     152293  0.0  0.0 34214564 9868 ?       S    11:11   0:00 /opt/google/chrome/chrome --type=zygote --crashpad-handler-pid=152284 --enable-crash-reporter=6576d338-8f16-4bc6-8a4b-81a751e9a13e, --change-stack-guard-on-fork=enable

=== DOCKER SERVICES ===
Docker containers:
NAMES                          STATUS                  PORTS
songnodes-data-transformer-2   Up 13 hours (healthy)   0.0.0.0:8002->8002/tcp, [::]:8002->8002/tcp
graph-visualization-api        Up 13 hours (healthy)   0.0.0.0:8084->8084/tcp, [::]:8084->8084/tcp
musicdb-redis                  Up 13 hours (healthy)   0.0.0.0:6380->6379/tcp, [::]:6380->6379/tcp
musicdb-postgres               Up 13 hours (healthy)   0.0.0.0:5433->5432/tcp, [::]:5433->5432/tcp
ai-rts-production              Up 13 hours (healthy)   80/tcp, 0.0.0.0:8080->8080/tcp, [::]:8080->8080/tcp
rts-monitor                    Up 25 hours             0.0.0.0:8081->80/tcp, [::]:8081->80/tcp
rts-game-production            Up 8 hours (healthy)    80/tcp, 0.0.0.0:80->8080/tcp, 0.0.0.0:3080->8080/tcp, [::]:80->8080/tcp, [::]:3080->8080/tcp

=== PERFORMANCE ANALYSIS ===
ML Readiness Score: 20/100
ML Readiness Level: LOW
Bottlenecks: GPU_utilization_11% GPU_memory_11.8% Memory_pressure_82.0%

OPTIMIZATION OPPORTUNITIES:
1. 🎯 GPU UNDERUTILIZATION (HIGH PRIORITY)
   Current: 11% | Target: >50%
   Recommendations:
   - Implement GPU-accelerated WebGL shaders for graph rendering
   - Move D3.js force calculations to GPU compute shaders
   - Enable hardware-accelerated canvas operations in PIXI.js
   - Implement parallel node/edge processing on GPU
2. 💾 GPU MEMORY UNDERUTILIZATION (MEDIUM PRIORITY)
   Current: 11.8% | Target: >40%
   Recommendations:
   - Increase texture cache size for node/edge rendering
   - Pre-load larger graph datasets into GPU memory
   - Implement GPU-based spatial indexing for fast queries
   - Cache frequent shader computations

4. 🔧 PIXI.js OPTIMIZATIONS:
   - Enable WebGL2 context for advanced GPU features
   - Implement object pooling for sprites and graphics
   - Use ParticleContainer for large numbers of nodes
   - Optimize texture atlasing for better GPU memory usage

5. 📊 MONITORING IMPROVEMENTS:
   - Add GPU metrics to Prometheus monitoring
   - Implement real-time performance dashboards
   - Set up automated performance regression detection
   - Add WebGL context loss detection and recovery

=======================================================
Analysis complete! Detailed results saved to: performance_analysis_20250820_235431.json
=======================================================

SUMMARY:
--------
GPU Utilization: 11% (NEEDS OPTIMIZATION)
./performance_analysis.sh: line 329: [: 11.8: integer expression expected
GPU Memory: 11.8% (ADEQUATE)
./performance_analysis.sh: line 331: [: 7.1: integer expression expected
CPU Usage: 7.1% (NORMAL)
./performance_analysis.sh: line 332: [: 82.0: integer expression expected
Memory Usage: 82.0% (NORMAL)
ML Readiness: 20/100 (LOW)

Next Steps:
1. Review detailed optimization opportunities above
2. Implement GPU utilization improvements for ML readiness
3. Configure comprehensive Prometheus monitoring
4. Test with larger datasets (>1000 nodes) for stress testing
