# Enrichment Workers Service Configuration
# ==========================================
# Blueprint Section 3: Queue-based Enrichment Workers with Horizontal Scaling
#
# This file adds enrichment worker services to the main docker-compose.yml
# Usage:
#   docker compose -f docker-compose.yml -f docker-compose.enrichment-workers.yml up -d
#
# Scaling:
#   docker compose -f docker-compose.yml -f docker-compose.enrichment-workers.yml up -d --scale enrichment-worker=5

services:
  # Queue initialization service (run once on startup)
  enrichment-queue-init:
    build:
      context: ./services/metadata-enrichment
      dockerfile: Dockerfile.worker
    container_name: enrichment-queue-init
    restart: "no"  # Run once
    command: python -m queue_init
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-musicdb}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-rabbitmq_secure_pass_2024}
      RABBITMQ_VHOST: musicdb
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - musicdb-backend

  # Enrichment worker pool (horizontally scalable)
  enrichment-worker:
    build:
      context: ./services/metadata-enrichment
      dockerfile: Dockerfile.worker
    # Note: No container_name - allows multiple instances
    restart: always
    environment:
      # RabbitMQ configuration
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-musicdb}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-rabbitmq_secure_pass_2024}
      RABBITMQ_VHOST: musicdb

      # Worker configuration
      PREFETCH_COUNT: ${ENRICHMENT_PREFETCH_COUNT:-1}  # Messages per worker
      QUEUE_NAME: metadata_enrichment_queue

      # Database configuration
      DATABASE_URL: postgresql+asyncpg://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb

      # Redis cache
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      # API credentials (loaded from database by enrichment pipeline)
      API_KEY_ENCRYPTION_SECRET: ${API_KEY_ENCRYPTION_SECRET:-songnodes_change_in_production_2024}
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}

      # Logging
      LOG_LEVEL: INFO

    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      enrichment-queue-init:
        condition: service_completed_successfully

    networks:
      - musicdb-backend
      - musicdb-monitoring

    # Resource limits per worker instance
    deploy:
      # Horizontal scaling: Start with 3 workers, scale up to 10
      replicas: ${ENRICHMENT_WORKERS:-3}
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      # Restart policy
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Backlog worker (low-priority queue processing)
  enrichment-backlog-worker:
    build:
      context: ./services/metadata-enrichment
      dockerfile: Dockerfile.worker
    restart: always
    command: python -m queue_consumer --queue metadata_enrichment_backlog_queue
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-musicdb}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-rabbitmq_secure_pass_2024}
      RABBITMQ_VHOST: musicdb

      PREFETCH_COUNT: 1
      QUEUE_NAME: metadata_enrichment_backlog_queue

      DATABASE_URL: postgresql+asyncpg://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      API_KEY_ENCRYPTION_SECRET: ${API_KEY_ENCRYPTION_SECRET:-songnodes_change_in_production_2024}
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}

      LOG_LEVEL: INFO

    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      enrichment-queue-init:
        condition: service_completed_successfully

    networks:
      - musicdb-backend

    deploy:
      replicas: ${ENRICHMENT_BACKLOG_WORKERS:-1}  # Lower priority, fewer workers
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

networks:
  musicdb-backend:
    external: true
  musicdb-monitoring:
    external: true
