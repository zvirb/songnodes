# version: '3.8'

# Blue Environment Configuration for Blue-Green Deployment
# This environment runs healthy services on different ports for zero-downtime deployment

services:
  # Database services (already healthy) - Blue Environment
  postgres-blue:
    image: postgres:15-alpine
    container_name: musicdb-postgres-blue
    restart: unless-stopped
    ports:
      - "5434:5432"  # Blue environment port
    environment:
      POSTGRES_DB: musicdb
      POSTGRES_USER: musicdb_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_prod_secure_2024_v1}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_blue_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    networks:
      - musicdb-backend-blue
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U musicdb_user -d musicdb"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 6G
        reservations:
          cpus: '2.0'
          memory: 3G
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=1536MB
      -c effective_cache_size=4608MB
      -c maintenance_work_mem=384MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  redis-blue:
    image: redis:7-alpine
    container_name: musicdb-redis-blue
    restart: unless-stopped
    ports:
      - "6381:6379"  # Blue environment port
    command: >
      redis-server
      --appendonly yes
      --maxmemory 2048mb
      --maxmemory-policy allkeys-lru
      --maxclients 10000
      --tcp-keepalive 60
      --timeout 0
      --tcp-backlog 511
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_blue_data:/data
    networks:
      - musicdb-backend-blue
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  rabbitmq-blue:
    image: rabbitmq:3.12-management-alpine
    container_name: musicdb-rabbitmq-blue
    restart: unless-stopped
    ports:
      - "5674:5672"    # Blue environment port
      - "15674:15672"  # Blue environment management port
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-musicdb_prod}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-rabbitmq_prod_secure_2024}
      RABBITMQ_DEFAULT_VHOST: musicdb
    volumes:
      - rabbitmq_blue_data:/var/lib/rabbitmq
    networks:
      - musicdb-backend-blue
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Healthy application services - Blue Environment
  scraper-orchestrator-blue:
    build:
      context: ./services/scraper-orchestrator
      dockerfile: Dockerfile
    container_name: scraper-orchestrator-blue
    restart: unless-stopped
    ports:
      - "8101:8001"  # Blue environment port
    environment:
      REDIS_HOST: musicdb-redis-blue
      REDIS_PORT: 6379
      RABBITMQ_HOST: musicdb-rabbitmq-blue
      RABBITMQ_PORT: 5672
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_prod_secure_2024_v1}@musicdb-postgres-blue:5432/musicdb
    depends_on:
      - postgres-blue
      - redis-blue
      - rabbitmq-blue
    networks:
      - musicdb-backend-blue
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  data-transformer-blue:
    build:
      context: ./services/data-transformer
      dockerfile: Dockerfile
    container_name: data-transformer-blue
    restart: unless-stopped
    ports:
      - "8102:8002"  # Blue environment port
    environment:
      REDIS_HOST: musicdb-redis-blue
      REDIS_PORT: 6379
      POSTGRES_HOST: musicdb-postgres-blue
      POSTGRES_PORT: 5432
      POSTGRES_DB: musicdb
      POSTGRES_USER: musicdb_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_prod_secure_2024_v1}
      BATCH_SIZE: 200
      LOG_LEVEL: INFO
    depends_on:
      - postgres-blue
      - redis-blue
    networks:
      - musicdb-backend-blue
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Monitoring services - Blue Environment
  prometheus-blue:
    image: prom/prometheus:latest
    container_name: metrics-prometheus-blue
    restart: unless-stopped
    ports:
      - "9092:9090"  # Blue environment port
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_blue_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - musicdb-monitoring-blue
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  grafana-blue:
    image: grafana/grafana:latest
    container_name: monitoring-grafana-blue
    restart: unless-stopped
    ports:
      - "3006:3000"  # Blue environment port
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_prod_2024}
      GF_INSTALL_PLUGINS: redis-datasource,postgres-datasource
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY:-grafana_prod_secret_2024_musicdb}
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: https://monitoring.musicdb.local/grafana
    volumes:
      - grafana_blue_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus-blue
    networks:
      - musicdb-monitoring-blue

  # Production Load Balancer for Blue Environment
  nginx-blue:
    image: nginx:alpine
    container_name: nginx-proxy-blue
    restart: unless-stopped
    ports:
      - "8444:443"  # Blue environment HTTPS port
      - "8089:80"   # Blue environment HTTP port
    volumes:
      - ./nginx/nginx-blue.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d/blue-simple.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - scraper-orchestrator-blue
      - data-transformer-blue
    networks:
      - musicdb-backend-blue
      - musicdb-frontend-blue
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Blue Environment Networks
networks:
  musicdb-backend-blue:
    driver: bridge
  musicdb-frontend-blue:
    driver: bridge
  musicdb-monitoring-blue:
    driver: bridge

# Blue Environment Volumes
volumes:
  postgres_blue_data:
    driver: local
  redis_blue_data:
    driver: local
  rabbitmq_blue_data:
    driver: local
  prometheus_blue_data:
    driver: local
  grafana_blue_data:
    driver: local