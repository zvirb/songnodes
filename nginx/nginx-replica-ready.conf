# ================================================
# NGINX CONFIGURATION FOR REPLICA-READY DEPLOYMENT
# ================================================
# Supports load balancing across multiple service replicas
# All services accessed through service discovery
# No hardcoded ports - uses Docker internal networking
# ================================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    # Basic Settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Performance Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    client_body_timeout 60;
    client_header_timeout 60;
    send_timeout 60;

    # Buffer Settings
    client_body_buffer_size 128k;
    client_max_body_size 100m;
    client_header_buffer_size 3m;
    large_client_header_buffers 4 256k;

    # Gzip Configuration
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Logging Format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=ws:10m rate=5r/s;

    # ================================================
    # UPSTREAM CONFIGURATIONS (REPLICA-AWARE)
    # ================================================

    # API Gateway - Load balance across multiple replicas
    upstream api_gateway {
        least_conn;
        # Docker Swarm or Compose will resolve to multiple IPs for replicas
        server api-gateway:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # WebSocket API - Supports sticky sessions for WebSocket connections
    upstream websocket {
        ip_hash;  # Sticky sessions for WebSocket continuity
        server websocket-api:8083 max_fails=3 fail_timeout=30s;
    }

    # Enhanced Visualization Service - Load balance across replicas
    upstream visualization {
        least_conn;
        server enhanced-visualization-service:8085 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # Frontend - Load balance across multiple frontend instances
    upstream frontend {
        least_conn;
        server frontend:80 max_fails=2 fail_timeout=30s;
        keepalive 8;
    }

    # ================================================
    # MAIN SERVER CONFIGURATION
    # ================================================

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # Security Headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # CORS Headers for API requests
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, Origin, X-Requested-With" always;
        add_header Access-Control-Max-Age "3600" always;

        # Handle OPTIONS requests for CORS preflight
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # ================================================
        # API ROUTES (Load Balanced)
        # ================================================

        # Health check endpoint
        location /health {
            limit_req zone=api burst=10 nodelay;
            access_log off;
            proxy_pass http://api_gateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Main API routes through gateway
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://api_gateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 60s;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
        }

        # Direct visualization API routes for performance
        location /api/v1/visualization/ {
            limit_req zone=api burst=15 nodelay;
            proxy_pass http://visualization;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 60s;
        }

        # Direct graph data endpoint for performance
        location /api/v1/graph {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://visualization;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # ================================================
        # WEBSOCKET ROUTES (Sticky Sessions)
        # ================================================

        # WebSocket endpoint with sticky sessions
        location /ws {
            limit_req zone=ws burst=10 nodelay;
            proxy_pass http://websocket;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
        }

        # API WebSocket endpoint
        location /api/v1/ws {
            limit_req zone=ws burst=10 nodelay;
            proxy_pass http://visualization;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
        }

        # ================================================
        # FRONTEND ROUTES (Load Balanced)
        # ================================================

        # Static assets with caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Frontend application (SPA routing)
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # SPA fallback for client-side routing
            proxy_intercept_errors on;
            error_page 404 = @fallback;
        }

        # SPA fallback location
        location @fallback {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # ================================================
        # STATUS AND MONITORING
        # ================================================

        # Nginx status (for monitoring)
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
    }
}