# Production Load Balancer Configuration for Song Nodes
# High-performance SSL/TLS termination with WebSocket support

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=20r/m;
limit_req_zone $binary_remote_addr zone=graph_limit:10m rate=30r/m;
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# Geo-blocking (if needed)
# geo $blocked_country {
#     default 0;
#     CN 1;
#     RU 1;
# }

# Backend server groups with health checks
upstream backend_api {
    least_conn;
    server backend-api-1:8000 max_fails=3 fail_timeout=30s weight=3;
    server backend-api-2:8000 max_fails=3 fail_timeout=30s weight=3;
    server backend-api-3:8000 max_fails=3 fail_timeout=30s weight=2;
    
    # Keep-alive connections for better performance
    keepalive 32;
}

upstream websocket_service {
    # Use IP hash for WebSocket session affinity
    ip_hash;
    server websocket-service-1:8001 max_fails=2 fail_timeout=20s;
    server websocket-service-2:8001 max_fails=2 fail_timeout=20s;
    
    keepalive 16;
}

upstream graph_visualization_api {
    least_conn;
    server graph-visualization-api-1:8084 max_fails=3 fail_timeout=30s weight=3;
    server graph-visualization-api-2:8084 max_fails=3 fail_timeout=30s weight=3;
    
    keepalive 16;
}

upstream frontend {
    least_conn;
    server frontend-1:3000 max_fails=2 fail_timeout=15s;
    server frontend-2:3000 max_fails=2 fail_timeout=15s;
    
    keepalive 8;
}

upstream health_monitor {
    server health-monitor:8085 max_fails=1 fail_timeout=10s;
    keepalive 4;
}

upstream monitoring {
    server grafana:3000 max_fails=2 fail_timeout=30s;
    keepalive 4;
}

# SSL certificate map for SNI
map $ssl_preread_server_name $backend_pool {
    songnodes.com backend_api;
    api.songnodes.com backend_api;
    ws.songnodes.com websocket_service;
    monitoring.songnodes.com monitoring;
    default backend_api;
}

# Security headers map
map $sent_http_content_type $security_headers {
    ~*text/html "add_header X-Frame-Options DENY always; add_header X-Content-Type-Options nosniff always; add_header X-XSS-Protection '1; mode=block' always; add_header Referrer-Policy 'strict-origin-when-cross-origin' always";
    default "add_header X-Content-Type-Options nosniff always";
}

# Main HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name songnodes.com;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/songnodes.com.crt;
    ssl_certificate_key /etc/nginx/ssl/songnodes.com.key;
    ssl_certificate /etc/nginx/ssl/songnodes.com.chain.crt;
    
    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # SSL optimization
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/nginx/ssl/ca-bundle.crt;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss://ws.songnodes.com https://api.songnodes.com; frame-ancestors 'none';" always;
    
    # Performance optimizations
    client_max_body_size 10M;
    client_body_timeout 30s;
    client_header_timeout 30s;
    send_timeout 30s;
    keepalive_timeout 65s;
    keepalive_requests 1000;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_types
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        text/css
        text/javascript
        text/xml
        text/plain;
    
    # Connection limits
    limit_conn conn_limit 20;
    
    # Block bad bots and scanners
    if ($http_user_agent ~* (nmap|nikto|wikto|sf|sqlmap|bsqlbf|w3af|acunetix|havij|appscan)) {
        return 444;
    }
    
    # Block common attack patterns
    location ~* \.(php|asp|aspx|jsp)$ {
        return 444;
    }
    
    # Health check endpoint (no rate limiting)
    location = /health {
        access_log off;
        proxy_pass http://health_monitor/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }
    
    # API endpoints with rate limiting
    location /api/ {
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://backend_api;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 16 8k;
        proxy_busy_buffers_size 16k;
        
        # Error handling
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 10s;
    }
    
    # Authentication endpoints with stricter rate limiting
    location /api/auth/ {
        limit_req zone=auth_limit burst=5 nodelay;
        
        proxy_pass http://backend_api;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        proxy_connect_timeout 10s;
        proxy_send_timeout 15s;
        proxy_read_timeout 15s;
    }
    
    # Graph API with specialized rate limiting
    location /api/graph/ {
        limit_req zone=graph_limit burst=10 nodelay;
        
        proxy_pass http://graph_visualization_api/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Longer timeouts for graph processing
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Larger buffers for graph data
        proxy_buffering on;
        proxy_buffer_size 16k;
        proxy_buffers 32 16k;
        proxy_busy_buffers_size 32k;
    }
    
    # Static assets with caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://frontend;
        proxy_set_header Host $host;
        
        # Cache static assets
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Cache-Status "STATIC";
        
        # Compress static assets
        gzip_static on;
        
        access_log off;
    }
    
    # Frontend application
    location / {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # SPA support
        try_files $uri $uri/ @fallback;
        
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # SPA fallback
    location @fallback {
        proxy_pass http://frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /5xx.html;
    
    location = /404.html {
        internal;
        return 404 '{"error": "Not Found", "message": "The requested resource was not found."}';
        add_header Content-Type application/json;
    }
    
    location = /5xx.html {
        internal;
        return 500 '{"error": "Internal Server Error", "message": "The server encountered an internal error."}';
        add_header Content-Type application/json;
    }
}

# WebSocket server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ws.songnodes.com;
    
    # SSL Configuration (same as main server)
    ssl_certificate /etc/nginx/ssl/songnodes.com.crt;
    ssl_certificate_key /etc/nginx/ssl/songnodes.com.key;
    ssl_certificate /etc/nginx/ssl/songnodes.com.chain.crt;
    
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # WebSocket optimizations
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # WebSocket timeouts
    proxy_connect_timeout 5s;
    proxy_send_timeout 3600s;  # Long timeout for persistent connections
    proxy_read_timeout 3600s;
    
    # Disable buffering for real-time communication
    proxy_buffering off;
    proxy_cache off;
    
    location / {
        # Connection rate limiting for WebSocket
        limit_conn conn_limit 50;
        
        proxy_pass http://websocket_service;
        
        # WebSocket health check
        access_log /var/log/nginx/websocket_access.log;
        error_log /var/log/nginx/websocket_error.log;
    }
}

# API subdomain
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.songnodes.com;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/songnodes.com.crt;
    ssl_certificate_key /etc/nginx/ssl/songnodes.com.key;
    ssl_certificate /etc/nginx/ssl/songnodes.com.chain.crt;
    
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # CORS headers for API
    add_header Access-Control-Allow-Origin "https://songnodes.com" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
    add_header Access-Control-Allow-Credentials "true" always;
    
    # Handle preflight requests
    location / {
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "https://songnodes.com";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With";
            add_header Access-Control-Allow-Credentials "true";
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
        
        limit_req zone=api_limit burst=30 nodelay;
        
        proxy_pass http://backend_api;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
}

# Monitoring subdomain
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name monitoring.songnodes.com;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/songnodes.com.crt;
    ssl_certificate_key /etc/nginx/ssl/songnodes.com.key;
    ssl_certificate /etc/nginx/ssl/songnodes.com.chain.crt;
    
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # Basic authentication for monitoring
    auth_basic "Monitoring Area";
    auth_basic_user_file /etc/nginx/.htpasswd;
    
    location / {
        proxy_pass http://monitoring;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name songnodes.com www.songnodes.com api.songnodes.com ws.songnodes.com monitoring.songnodes.com;
    
    # Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# WWW redirect
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.songnodes.com;
    
    ssl_certificate /etc/nginx/ssl/songnodes.com.crt;
    ssl_certificate_key /etc/nginx/ssl/songnodes.com.key;
    
    return 301 https://songnodes.com$request_uri;
}