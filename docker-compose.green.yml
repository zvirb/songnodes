version: '3.8'

# Green Environment Configuration for Blue-Green Deployment
# This is the production environment running current stable services

services:
  # Frontend Service - Green Environment
  frontend-green:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - VITE_FILTER_PIXI_DEPRECATIONS=true
    container_name: songnodes-frontend-green
    restart: unless-stopped
    ports:
      - "3000:80"  # Green environment port mapped to internal nginx
    environment:
      - NODE_ENV=production
    networks:
      - songnodes-frontend-green
      - songnodes-backend-green
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Backend API - Green Environment
  backend-api-green:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: songnodes-backend-api-green
    restart: unless-stopped
    ports:
      - "8000:8000"  # Green environment port
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_prod_secure_2024_v1}@postgres-green:5432/musicdb
      - REDIS_URL=redis://redis-green:6379
      - JWT_SECRET=${JWT_SECRET:-jwt_prod_secret_2024_musicdb}
      - RATE_LIMIT_ENABLED=true
      - CORS_ORIGIN=${CORS_ORIGIN:-https://songnodes.com}
    depends_on:
      - postgres-green
      - redis-green
    networks:
      - songnodes-backend-green
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # WebSocket Service - Green Environment
  websocket-service-green:
    build:
      context: ./services/websocket
      dockerfile: Dockerfile
    container_name: songnodes-websocket-green
    restart: unless-stopped
    ports:
      - "8001:8001"  # Green environment port
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis-green:6379
      - CORS_ORIGIN=${CORS_ORIGIN:-https://songnodes.com}
    depends_on:
      - redis-green
    networks:
      - songnodes-backend-green
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '8001']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Graph Visualization API - Green Environment
  graph-visualization-api-green:
    build:
      context: ./services/graph-visualization-api
      dockerfile: Dockerfile
    container_name: songnodes-graph-api-green
    restart: unless-stopped
    ports:
      - "8084:8084"  # Green environment port
    environment:
      - DATABASE_URL=postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_prod_secure_2024_v1}@postgres-green:5432/musicdb
      - REDIS_URL=redis://redis-green:6379
      - PYTHON_ENV=production
      - MAX_GRAPH_NODES=50000
      - CACHE_TTL=3600
    depends_on:
      - postgres-green
      - redis-green
    networks:
      - songnodes-backend-green
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8084/health']
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Database - Green Environment
  postgres-green:
    image: postgres:15-alpine
    container_name: songnodes-postgres-green
    restart: unless-stopped
    ports:
      - "5432:5432"  # Green environment port (production)
    environment:
      POSTGRES_DB: musicdb
      POSTGRES_USER: musicdb_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_prod_secure_2024_v1}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_green_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    networks:
      - songnodes-backend-green
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U musicdb_user -d musicdb"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 6G
        reservations:
          cpus: '2.0'
          memory: 3G
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=1536MB
      -c effective_cache_size=4608MB
      -c maintenance_work_mem=384MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Redis Cache - Green Environment
  redis-green:
    image: redis:7-alpine
    container_name: songnodes-redis-green
    restart: unless-stopped
    ports:
      - "6379:6379"  # Green environment port (production)
    command: >
      redis-server
      --appendonly yes
      --maxmemory 2048mb
      --maxmemory-policy allkeys-lru
      --maxclients 10000
      --tcp-keepalive 60
      --timeout 0
      --tcp-backlog 511
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_green_data:/data
    networks:
      - songnodes-backend-green
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Load Balancer - Green Environment
  nginx-green:
    image: nginx:alpine
    container_name: songnodes-nginx-green
    restart: unless-stopped
    ports:
      - "80:80"    # Production HTTP port
      - "443:443"  # Production HTTPS port
    volumes:
      - ./nginx/conf.d/green-production.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend-green
      - backend-api-green
      - websocket-service-green
      - graph-visualization-api-green
    networks:
      - songnodes-frontend-green
      - songnodes-backend-green
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Monitoring Services - Green Environment
  prometheus-green:
    image: prom/prometheus:latest
    container_name: songnodes-prometheus-green
    restart: unless-stopped
    ports:
      - "9090:9090"  # Production Prometheus port
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_green_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.enable-remote-write-receiver'
    networks:
      - songnodes-monitoring-green
      - songnodes-backend-green
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  grafana-green:
    image: grafana/grafana:latest
    container_name: songnodes-grafana-green
    restart: unless-stopped
    ports:
      - "3001:3000"  # Production Grafana port
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_prod_2024}
      GF_INSTALL_PLUGINS: redis-datasource,postgres-datasource
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY:-grafana_prod_secret_2024_songnodes}
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: https://monitoring.songnodes.com/grafana
      GF_FEATURE_TOGGLES_ENABLE: publicDashboards
    volumes:
      - grafana_green_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus-green
    networks:
      - songnodes-monitoring-green
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # AlertManager for production alerting
  alertmanager-green:
    image: prom/alertmanager:latest
    container_name: songnodes-alertmanager-green
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
      - alertmanager_green_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alerts.songnodes.com'
      - '--cluster.advertise-address=0.0.0.0:9093'
    networks:
      - songnodes-monitoring-green

# Green Environment Networks
networks:
  songnodes-frontend-green:
    driver: bridge
    name: songnodes-frontend-green
  songnodes-backend-green:
    driver: bridge
    name: songnodes-backend-green
  songnodes-monitoring-green:
    driver: bridge
    name: songnodes-monitoring-green

# Green Environment Volumes
volumes:
  postgres_green_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/songnodes/data/green/postgres
  redis_green_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/songnodes/data/green/redis
  prometheus_green_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/songnodes/data/green/prometheus
  grafana_green_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/songnodes/data/green/grafana
  alertmanager_green_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/songnodes/data/green/alertmanager