{{- if .Values.networkPolicy.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "songnodes.labels" (dict "ctx" . "labels" (dict "policy" "default-deny")) | nindent 4 }}
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "songnodes.labels" (dict "ctx" . "labels" (dict "policy" "dns-egress")) | nindent 4 }}
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-to-apis
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "songnodes.labels" (dict "ctx" . "labels" (dict "policy" "frontend-egress")) | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.services.frontend.name }}
  policyTypes:
    - Egress
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: {{ .Values.services.restApi.name }}
      ports:
        - protocol: TCP
          port: {{ .Values.services.restApi.service.ports.http.port }}
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: {{ .Values.services.graphVisualization.name }}
      ports:
        - protocol: TCP
          port: {{ .Values.services.graphVisualization.service.ports.http.port }}
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: {{ .Values.services.websocketApi.name }}
      ports:
        - protocol: TCP
          port: {{ .Values.services.websocketApi.service.ports.http.port }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-to-frontend
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "songnodes.labels" (dict "ctx" . "labels" (dict "policy" "ingress-frontend")) | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.services.frontend.name }}
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: {{ .Values.networkPolicy.ingressControllerNamespaceLabel }}
      ports:
        - protocol: TCP
          port: {{ .Values.services.frontend.service.ports.http.port }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-to-apis
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "songnodes.labels" (dict "ctx" . "labels" (dict "policy" "ingress-apis")) | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: backend
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: {{ .Values.networkPolicy.ingressControllerNamespaceLabel }}
      ports:
        - protocol: TCP
          port: {{ .Values.services.restApi.service.ports.http.port }}
        - protocol: TCP
          port: {{ .Values.services.websocketApi.service.ports.http.port }}
        - protocol: TCP
          port: {{ .Values.services.graphVisualization.service.ports.http.port }}
        - protocol: TCP
          port: {{ .Values.services.scraperOrchestrator.service.ports.http.port }}
        - protocol: TCP
          port: {{ .Values.services.nlpProcessor.service.ports.http.port }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-to-postgres
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "songnodes.labels" (dict "ctx" . "labels" (dict "policy" "backend-to-postgres")) | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: postgres
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: backend
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: scraper
      ports:
        - protocol: TCP
          port: {{ .Values.postgres.service.port }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-to-redis
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "songnodes.labels" (dict "ctx" . "labels" (dict "policy" "backend-to-redis")) | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: backend
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: scraper
      ports:
        - protocol: TCP
          port: {{ .Values.redis.service.port }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-to-rabbitmq
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "songnodes.labels" (dict "ctx" . "labels" (dict "policy" "backend-to-rabbitmq")) | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: backend
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: scraper
      ports:
        - protocol: TCP
          port: {{ .Values.rabbitmq.service.ports.amqp }}
        - protocol: TCP
          port: {{ .Values.rabbitmq.service.ports.management }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: prometheus-scraping
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "songnodes.labels" (dict "ctx" . "labels" (dict "policy" "prometheus-scraping")) | nindent 4 }}
spec:
  podSelector: {}
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              {{- toYaml .Values.networkPolicy.prometheusSelector | nindent 12 }}
      ports:
        - protocol: TCP
          port: {{ .Values.config.data.METRICS_PORT | default "9090" | int }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: prometheus-egress
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "songnodes.labels" (dict "ctx" . "labels" (dict "policy" "prometheus-egress")) | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      {{- toYaml .Values.networkPolicy.prometheusSelector | nindent 6 }}
  policyTypes:
    - Egress
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
    - to:
        - podSelector: {}
      ports:
        - protocol: TCP
          port: {{ .Values.config.data.METRICS_PORT | default "9090" | int }}
    - to:
        - namespaceSelector: {}
          podSelector:
            matchLabels:
              component: apiserver
      ports:
        - protocol: TCP
          port: 443
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: grafana-to-prometheus
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "songnodes.labels" (dict "ctx" . "labels" (dict "policy" "grafana-egress")) | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      {{- toYaml .Values.networkPolicy.grafanaSelector | nindent 6 }}
  policyTypes:
    - Egress
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
    - to:
        - podSelector:
            matchLabels:
              {{- toYaml .Values.networkPolicy.prometheusSelector | nindent 12 }}
      ports:
        - protocol: TCP
          port: {{ .Values.config.data.METRICS_PORT | default "9090" | int }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-internet-egress
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "songnodes.labels" (dict "ctx" . "labels" (dict "policy" "backend-egress")) | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: backend
  policyTypes:
    - Egress
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 443
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 80
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: scraper-internet-egress
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "songnodes.labels" (dict "ctx" . "labels" (dict "policy" "scraper-egress")) | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: scraper
  policyTypes:
    - Egress
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 443
{{- end }}
