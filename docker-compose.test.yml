# Docker Compose for Test Environment
# Lightweight configuration for running tests

version: '3.8'

services:
  # Test Database
  postgres-test:
    image: postgres:15-alpine
    container_name: test-postgres
    restart: "no"
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: test_musicdb
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_musicdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    tmpfs:
      - /var/lib/postgresql/data

  # Test Redis
  redis-test:
    image: redis:7-alpine
    container_name: test-redis
    restart: "no"
    ports:
      - "6380:6379"
    command: redis-server --appendonly no --save ""
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    tmpfs:
      - /data

  # Test RabbitMQ (if needed for integration tests)
  rabbitmq-test:
    image: rabbitmq:3.12-alpine
    container_name: test-rabbitmq
    restart: "no"
    ports:
      - "5673:5672"
    environment:
      RABBITMQ_DEFAULT_USER: test
      RABBITMQ_DEFAULT_PASS: test
      RABBITMQ_DEFAULT_VHOST: test
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 15s
      timeout: 10s
      retries: 5
    tmpfs:
      - /var/lib/rabbitmq

  # Test Scraper Orchestrator
  test-orchestrator:
    build:
      context: ./services/scraper-orchestrator
      dockerfile: Dockerfile
    container_name: test-orchestrator
    restart: "no"
    ports:
      - "8001:8001"
    environment:
      ENVIRONMENT: test
      LOG_LEVEL: DEBUG
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq-test
      RABBITMQ_PORT: 5672
      DATABASE_URL: postgresql://test_user:test_password@postgres-test:5432/test_musicdb
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      rabbitmq-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Test API Gateway (lightweight)
  test-api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: test-api-gateway
    restart: "no"
    ports:
      - "8080:8080"
    environment:
      ENVIRONMENT: test
      LOG_LEVEL: DEBUG
      JWT_SECRET: test_jwt_secret
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      RATE_LIMIT_ENABLED: "false"  # Disable rate limiting in tests
    depends_on:
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 10s
      retries: 3

  # Test Wiremock for external service mocking
  wiremock:
    image: wiremock/wiremock:latest
    container_name: test-wiremock
    restart: "no"
    ports:
      - "8089:8080"
    volumes:
      - ./tests/fixtures/wiremock:/home/wiremock
    command: ["--global-response-templating", "--verbose"]

  # Test Nginx for integration testing
  nginx-test:
    image: nginx:alpine
    container_name: test-nginx
    restart: "no"
    ports:
      - "8088:80"
    volumes:
      - ./tests/fixtures/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./tests/fixtures/static:/usr/share/nginx/html:ro
    depends_on:
      - test-api-gateway

volumes:
  test_postgres_data:
    driver: local

networks:
  default:
    name: test-network
    driver: bridge