openapi: 3.0.3
info:
  title: SongNodes API
  description: Music Database and Tracklist Management System API
  version: 1.0.0
  contact:
    name: SongNodes Team
    email: support@songnodes.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.songnodes.com
    description: Production server

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Check if the API gateway is running and healthy
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
        '429':
          description: Rate limit exceeded

  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                name:
                  type: string
                  minLength: 2
              required:
                - email
                - password
                - name
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input data
        '409':
          description: Email already exists

  /api/v1/tracks:
    get:
      tags:
        - Tracks
      summary: Get tracks
      description: Retrieve a list of tracks with optional filtering
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: artist
          in: query
          schema:
            type: string
        - name: genre
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of tracks
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Track'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
        '503':
          description: Service temporarily unavailable

    post:
      tags:
        - Tracks
      summary: Create track
      description: Add a new track to the database
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackInput'
      responses:
        '201':
          description: Track created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized

  /api/v1/tracks/{id}:
    get:
      tags:
        - Tracks
      summary: Get track by ID
      description: Retrieve a specific track by its ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Track details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '404':
          description: Track not found
        '401':
          description: Unauthorized

  /api/v1/artists:
    get:
      tags:
        - Artists
      summary: Get artists
      description: Retrieve a list of artists
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of artists
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Artist'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /api/v1/playlists:
    get:
      tags:
        - Playlists
      summary: Get playlists
      description: Retrieve user playlists
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of playlists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'

  /api/v1/search:
    get:
      tags:
        - Search
      summary: Search content
      description: Search tracks, artists, and playlists
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 3
        - name: type
          in: query
          schema:
            type: string
            enum: [tracks, artists, playlists, all]
            default: all
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  tracks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Track'
                  artists:
                    type: array
                    items:
                      $ref: '#/components/schemas/Artist'
                  playlists:
                    type: array
                    items:
                      $ref: '#/components/schemas/Playlist'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time

    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        artist:
          type: string
        album:
          type: string
        duration:
          type: integer
          description: Duration in seconds
        genre:
          type: string
        year:
          type: integer
        trackNumber:
          type: integer
        bpm:
          type: integer
        key:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TrackInput:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        artist:
          type: string
          minLength: 1
        album:
          type: string
        duration:
          type: integer
          minimum: 1
        genre:
          type: string
        year:
          type: integer
          minimum: 1900
          maximum: 2100
        trackNumber:
          type: integer
          minimum: 1
        bpm:
          type: integer
          minimum: 50
          maximum: 300
        key:
          type: string
      required:
        - title
        - artist

    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        genre:
          type: string
        country:
          type: string
        bio:
          type: string
        website:
          type: string
          format: url
        socialMedia:
          type: object
        trackCount:
          type: integer
        createdAt:
          type: string
          format: date-time

    Playlist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        userId:
          type: string
          format: uuid
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
        isPublic:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        hasNext:
          type: boolean
        hasPrev:
          type: boolean

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        path:
          type: string
        timestamp:
          type: string
          format: date-time

security:
  - bearerAuth: []

tags:
  - name: Health
    description: Health check endpoints
  - name: Authentication
    description: User authentication and authorization
  - name: Tracks
    description: Track management operations
  - name: Artists
    description: Artist management operations
  - name: Playlists
    description: Playlist management operations
  - name: Search
    description: Search functionality