# Production Deployment - Simple Blue Environment
# Using existing healthy services as production deployment

services:
  # Core Production Database
  postgres-production:
    image: postgres:15-alpine
    container_name: songnodes-postgres-production
    restart: unless-stopped
    ports:
      - "5432:5432"  # Production port
    environment:
      POSTGRES_DB: musicdb
      POSTGRES_USER: musicdb_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_prod_secure_2024_v1}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - ./data/production/postgres:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    networks:
      - songnodes-production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U musicdb_user -d musicdb"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=1536MB
      -c effective_cache_size=4608MB
      -c maintenance_work_mem=384MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Core Production Cache
  redis-production:
    image: redis:7-alpine
    container_name: songnodes-redis-production
    restart: unless-stopped
    ports:
      - "6379:6379"  # Production port
    command: >
      redis-server
      --appendonly yes
      --maxmemory 2048mb
      --maxmemory-policy allkeys-lru
      --maxclients 10000
      --tcp-keepalive 60
      --timeout 0
      --tcp-backlog 511
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - ./data/production/redis:/data
    networks:
      - songnodes-production
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Graph Visualization API
  graph-visualization-api-production:
    build:
      context: ./services/graph-visualization-api
      dockerfile: Dockerfile
    container_name: songnodes-graph-api-production
    restart: unless-stopped
    ports:
      - "8084:8084"
    environment:
      - DATABASE_URL=postgresql+asyncpg://musicdb_user:${POSTGRES_PASSWORD:-musicdb_prod_secure_2024_v1}@postgres-production:5432/musicdb
      - REDIS_URL=redis://redis-production:6379
      - REDIS_HOST=redis-production
      - PYTHON_ENV=production
      - MAX_GRAPH_NODES=50000
      - CACHE_TTL=3600
    depends_on:
      - postgres-production
      - redis-production
    networks:
      - songnodes-production
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8084/health']
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # WebSocket API
  websocket-api-production:
    build:
      context: ./services/websocket-api
      dockerfile: Dockerfile
    container_name: songnodes-websocket-production
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      - REDIS_URL=redis://redis-production:6379
      - DATABASE_URL=postgresql+asyncpg://musicdb_user:${POSTGRES_PASSWORD:-musicdb_prod_secure_2024_v1}@postgres-production:5432/musicdb
      - PYTHON_ENV=production
    depends_on:
      - redis-production
      - postgres-production
    networks:
      - songnodes-production
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '8083']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # REST API
  rest-api-production:
    build:
      context: ./services/rest-api
      dockerfile: Dockerfile
    container_name: songnodes-rest-api-production
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      - DATABASE_URL=postgresql+asyncpg://musicdb_user:${POSTGRES_PASSWORD:-musicdb_prod_secure_2024_v1}@postgres-production:5432/musicdb
      - REDIS_URL=redis://redis-production:6379
      - PYTHON_ENV=production
    depends_on:
      - postgres-production
      - redis-production
    networks:
      - songnodes-production
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8082/health']
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Scraper Orchestrator
  scraper-orchestrator-production:
    build:
      context: ./services/scraper-orchestrator
      dockerfile: Dockerfile
    container_name: songnodes-scraper-orchestrator-production
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      REDIS_HOST: redis-production
      REDIS_PORT: 6379
      DATABASE_URL: postgresql+asyncpg://musicdb_user:${POSTGRES_PASSWORD:-musicdb_prod_secure_2024_v1}@postgres-production:5432/musicdb
    depends_on:
      - postgres-production
      - redis-production
    networks:
      - songnodes-production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Production Monitoring - Prometheus
  prometheus-production:
    image: prom/prometheus:latest
    container_name: songnodes-prometheus-production
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - ./data/production/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.enable-remote-write-receiver'
    networks:
      - songnodes-production
      - songnodes-monitoring

  # Production Monitoring - Grafana
  grafana-production:
    image: grafana/grafana:latest
    container_name: songnodes-grafana-production
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_prod_2024}
      GF_INSTALL_PLUGINS: redis-datasource,postgres-datasource
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY:-grafana_prod_secret_2024_songnodes}
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: https://monitoring.songnodes.com/grafana
      GF_FEATURE_TOGGLES_ENABLE: publicDashboards
    volumes:
      - ./data/production/grafana:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus-production
    networks:
      - songnodes-monitoring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# Production Networks
networks:
  songnodes-production:
    driver: bridge
    name: songnodes-production
  songnodes-monitoring:
    driver: bridge
    name: songnodes-monitoring

# Production Volumes - Note: Using bind mounts for better control
volumes:
  postgres_production_data:
    driver: local
  redis_production_data:  
    driver: local
  prometheus_production_data:
    driver: local
  grafana_production_data:
    driver: local