global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    monitor: 'songnodes-gpu-enhanced'
    environment: 'development'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
            - alertmanager:9093

# Load alert rules
rule_files:
  - '/etc/prometheus/gpu_performance_rules.yml'
  - '/etc/prometheus/frontend_performance_rules.yml'
  - '/etc/prometheus/ml_readiness_rules.yml'

scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 15s

  # NVIDIA GPU metrics using nvidia_gpu_exporter
  - job_name: 'nvidia-gpu'
    static_configs:
      - targets: ['localhost:9445']  # nvidia_gpu_exporter default port
    scrape_interval: 10s  # Frequent GPU monitoring
    scrape_timeout: 5s
    metrics_path: '/metrics'

  # Node exporter with GPU support
  - job_name: 'node-gpu'
    static_configs:
      - targets: ['localhost:9100']
    scrape_interval: 15s
    params:
      collect[]:
        - cpu
        - meminfo
        - loadavg
        - filesystem
        - netdev
        - diskstats
        # Enable if nvidia_gpu_exporter is integrated
        - nvidia_gpu

  # Frontend performance metrics (custom endpoint)
  - job_name: 'frontend-performance'
    static_configs:
      - targets: ['localhost:3006']  # Vite dev server
    metrics_path: '/api/metrics'
    scrape_interval: 5s  # High frequency for real-time monitoring
    scrape_timeout: 3s

  # WebGL performance metrics via custom exporter
  - job_name: 'webgl-performance'
    static_configs:
      - targets: ['localhost:8090']  # Custom WebGL metrics endpoint
    scrape_interval: 2s  # Very high frequency for GPU monitoring
    scrape_timeout: 1s

  # Graph visualization API with performance metrics
  - job_name: 'graph-api-performance'
    static_configs:
      - targets: ['graph-visualization-api:8084']
    metrics_path: '/metrics'
    scrape_interval: 15s

  # Data transformer service with GPU utilization
  - job_name: 'data-transformer-gpu'
    static_configs:
      - targets: ['songnodes-data-transformer-2:8002']
    metrics_path: '/metrics'
    scrape_interval: 30s

  # System resource monitoring
  - job_name: 'system-resources'
    static_configs:
      - targets: ['localhost:9100']
    scrape_interval: 10s
    params:
      collect[]:
        - cpu
        - meminfo
        - loadavg
        - thermal_zone  # Temperature monitoring

  # Docker container metrics with GPU awareness
  - job_name: 'docker-gpu'
    static_configs:
      - targets: ['localhost:9323']  # Docker daemon metrics
    scrape_interval: 30s
    metrics_path: '/metrics'

  # Custom application metrics for ML workloads
  - job_name: 'ml-performance'
    static_configs:
      - targets: ['localhost:8080']  # Custom ML metrics endpoint
    metrics_path: '/ml/metrics'
    scrape_interval: 30s

  # Browser performance monitoring (if available)
  - job_name: 'browser-performance'
    static_configs:
      - targets: ['localhost:9222']  # Chrome DevTools Protocol
    metrics_path: '/json/runtime/evaluate'
    scrape_interval: 10s
    params:
      expression:
        - 'performance.memory'
        - 'navigator.hardwareConcurrency'

  # Redis with enhanced metrics
  - job_name: 'redis-enhanced'
    static_configs:
      - targets: ['localhost:6380']
    scrape_interval: 30s
    redis_addr: 'redis://localhost:6380'

  # PostgreSQL with performance focus
  - job_name: 'postgres-performance'
    static_configs:
      - targets: ['localhost:5433']
    scrape_interval: 30s
    params:
      # Monitor query performance
      collect[]:
        - 'pg_stat_database'
        - 'pg_stat_user_tables'
        - 'pg_statio_user_tables'
        - 'pg_stat_activity'

  # Health monitoring for all services
  - job_name: 'service-health-enhanced'
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
          # Core services
          - http://localhost:3006/  # Frontend dev server
          - http://localhost:8084/health  # Graph API
          - http://localhost:8002/health  # Data transformer
          - http://localhost:6380/  # Redis
          - http://localhost:5433/  # PostgreSQL
          # Performance monitoring endpoints
          - http://localhost:8090/health  # WebGL metrics
          - http://localhost:9445/  # GPU exporter
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox_exporter:9115

# GPU Performance Alert Rules Configuration
# This would be in /etc/prometheus/gpu_performance_rules.yml
---
# GPU Performance Rules Template:
gpu_performance_rules: |
  groups:
  - name: gpu_performance
    rules:
    - alert: GPUUtilizationLow
      expr: nvidia_gpu_utilization_gpu < 50
      for: 2m
      labels:
        severity: warning
        category: performance
      annotations:
        summary: "GPU utilization below ML readiness threshold"
        description: "GPU {{ $labels.instance }} utilization is {{ $value }}% (target: >50%)"
        
    - alert: GPUMemoryUnderutilized
      expr: (nvidia_gpu_memory_used / nvidia_gpu_memory_total) * 100 < 30
      for: 5m
      labels:
        severity: info
        category: optimization
      annotations:
        summary: "GPU memory underutilized"
        description: "GPU {{ $labels.instance }} memory usage is {{ $value }}% (can optimize for more caching)"
        
    - alert: GPUTemperatureHigh
      expr: nvidia_gpu_temperature_gpu > 80
      for: 1m
      labels:
        severity: warning
        category: thermal
      annotations:
        summary: "GPU temperature high"
        description: "GPU {{ $labels.instance }} temperature is {{ $value }}Â°C"
        
    - alert: FrontendFPSLow
      expr: webgl_fps < 30
      for: 30s
      labels:
        severity: warning
        category: user_experience
      annotations:
        summary: "Frontend FPS below acceptable threshold"
        description: "WebGL FPS is {{ $value }} (target: >30 FPS)"
        
    - alert: WebGLContextLoss
      expr: increase(webgl_context_loss_total[5m]) > 0
      for: 0s
      labels:
        severity: critical
        category: stability
      annotations:
        summary: "WebGL context loss detected"
        description: "WebGL context has been lost {{ $value }} times in the last 5 minutes"

# Frontend Performance Rules Template:
frontend_performance_rules: |
  groups:
  - name: frontend_performance
    rules:
    - alert: HighJavaScriptExecutionTime
      expr: browser_js_execution_time > 16
      for: 1m
      labels:
        severity: warning
        category: performance
      annotations:
        summary: "JavaScript execution time too high"
        description: "JS execution time is {{ $value }}ms (target: <16ms for 60 FPS)"
        
    - alert: MemoryLeakDetected
      expr: increase(browser_memory_used[10m]) > 100000000  # 100MB increase
      for: 0s
      labels:
        severity: warning
        category: memory
      annotations:
        summary: "Potential memory leak detected"
        description: "Browser memory increased by {{ $value }} bytes in 10 minutes"
        
    - alert: LargeGraphRenderingSlow
      expr: graph_render_time{node_count=">1000"} > 1000
      for: 30s
      labels:
        severity: info
        category: optimization
      annotations:
        summary: "Large graph rendering performance issue"
        description: "Graph with {{ $labels.node_count }} nodes taking {{ $value }}ms to render"

# ML Readiness Rules Template:
ml_readiness_rules: |
  groups:
  - name: ml_readiness
    rules:
    - alert: MLReadinessScoreLow
      expr: ml_readiness_score < 60
      for: 5m
      labels:
        severity: info
        category: ml_preparation
      annotations:
        summary: "ML readiness score below target"
        description: "Current ML readiness score is {{ $value }}/100 (target: >60)"
        
    - alert: ComputeResourcesInsufficient
      expr: |
        (nvidia_gpu_utilization_gpu < 50) and 
        (cpu_usage_percent > 70) and 
        (memory_usage_percent > 75)
      for: 2m
      labels:
        severity: warning
        category: resource_allocation
      annotations:
        summary: "Compute resources not optimally allocated for ML workloads"
        description: "GPU underutilized while CPU/memory are stressed"
        
    - alert: GraphProcessingBottleneck
      expr: graph_processing_time > 5000
      for: 1m
      labels:
        severity: warning
        category: algorithm_performance
      annotations:
        summary: "Graph processing performance bottleneck"
        description: "Graph algorithms taking {{ $value }}ms (should be optimized for GPU)"

# Custom metric examples that should be implemented:
custom_metrics_examples: |
  # WebGL/GPU metrics (to be implemented in frontend):
  - webgl_fps
  - webgl_frame_time
  - webgl_draw_calls
  - webgl_texture_binds
  - webgl_context_loss_total
  - gpu_memory_usage_bytes
  - gpu_utilization_percent
  
  # Graph visualization metrics:
  - graph_nodes_rendered
  - graph_edges_rendered
  - graph_render_time
  - graph_layout_calculation_time
  - graph_interaction_response_time
  
  # ML readiness metrics:
  - ml_readiness_score
  - compute_shader_availability
  - parallel_processing_capability
  - data_throughput_mbps