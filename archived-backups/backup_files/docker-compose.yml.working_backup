x-logging: &id001
  driver: json-file
  options:
    max-size: 10m
    max-file: '3'
x-base-service-properties:
  restart: unless-stopped
  networks: &id002
  - ai_workflow_engine_net
  logging: *id001
x-gpu-deploy:
  deploy: &id003
    resources:
      reservations:
        devices:
        - driver: nvidia
          count: all
          capabilities:
          - gpu
networks:
  ai_workflow_engine_net:
    driver: bridge
volumes:
  postgres_data: null
  redis_data: null
  qdrant_data: null
  prometheus_data: null
  grafana_data: null
  alertmanager_data: null
  ollama_data: null
  certs: null
  webui_node_modules: {}
  webui_next_node_modules: {}
  jaeger_data: null
  caddy_data: null
  caddy_config: null
  loki_data: null
  elasticsearch_data: null
  kibana_data: null
secrets:
  admin_email:
    file: ./secrets/admin_email.txt
  admin_password:
    file: ./secrets/admin_password.txt
  google_client_id:
    file: ./secrets/google_client_id.txt
  google_client_secret:
    file: ./secrets/google_client_secret.txt
  JWT_SECRET_KEY:
    file: ./secrets/jwt_secret_key.txt
  CSRF_SECRET_KEY:
    file: ./secrets/csrf_secret_key.txt
  POSTGRES_PASSWORD:
    file: ./secrets/postgres_password.txt
  postgres_user:
    file: ./secrets/postgres_user.txt
  postgres_db:
    file: ./secrets/postgres_db.txt
  QDRANT_API_KEY:
    file: ./secrets/qdrant_api_key.txt
  pgbouncer_users:
    file: ./secrets/pgbouncer_userlist.txt
  REDIS_PASSWORD:
    file: ./secrets/redis_password.txt
  redis_users_acl:
    file: ./secrets/redis_users.acl
  API_KEY:
    file: ./secrets/api_key.txt
services:
  coordination-service:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    build:
      context: ./app/coordination_service
      dockerfile: Dockerfile
    image: ai_workflow_engine/coordination-service
    environment:
    - DATABASE_URL=postgresql://app_user:${POSTGRES_PASSWORD}@postgres:5432/ai_workflow_db
    - REDIS_HOST=redis
    - REDIS_PORT=6379
    - REDIS_DB=1
    - REDIS_USER=lwe-app
    - REDIS_PASSWORD=${REDIS_PASSWORD}
    - QDRANT_URL=https://qdrant:6333
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    ports:
    - 8001:8001
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:8001/health --max-time 3 || exit 1
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 45s
  hybrid-memory-service:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    build:
      context: ./app/memory_service
      dockerfile: Dockerfile
    image: ai_workflow_engine/hybrid-memory-service
    environment:
    - DATABASE_URL=postgresql+asyncpg://app_user:${POSTGRES_PASSWORD}@postgres:5432/ai_workflow_db
    - QDRANT_URL=https://qdrant:6333
    - OLLAMA_URL=http://ollama:11434
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      ollama:
        condition: service_healthy
    ports:
    - 8002:8002
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:8002/health --max-time 3 || exit 1
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 45s
  learning-service:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    build:
      context: ./app/learning_service
      dockerfile: Dockerfile
    image: ai_workflow_engine/learning-service
    command:
    - python
    - -m
    - uvicorn
    - main_minimal:app
    - --host
    - 0.0.0.0
    - --port
    - '8005'
    environment:
    - DATABASE_URL=postgresql://app_user:${POSTGRES_PASSWORD}@postgres:5432/ai_workflow_db
    - REDIS_HOST=redis
    - REDIS_PORT=6379
    - REDIS_DB=2
    - REDIS_USER=lwe-app
    - REDIS_PASSWORD=${REDIS_PASSWORD}
    - QDRANT_URL=https://qdrant:6333
    - OLLAMA_URL=http://ollama:11434
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - LEARNING_NEO4J_AUTH=neo4j/password
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      ollama:
        condition: service_healthy
    ports:
    - 8003:8005
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:8005/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  perception-service:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    build:
      context: ./app/perception_service
      dockerfile: Dockerfile
    image: ai_workflow_engine/perception-service
    environment:
    - OLLAMA_URL=http://ollama:11434
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      ollama:
        condition: service_healthy
    ports:
    - 8004:8004
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:8004/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  reasoning-service:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    build:
      context: ./app/reasoning_service
      dockerfile: Dockerfile
      target: production
    image: ai_workflow_engine/reasoning-service
    environment:
    - DATABASE_URL=postgresql://app_user:${POSTGRES_PASSWORD}@postgres:5432/ai_workflow_db
    - REDIS_HOST=redis
    - REDIS_PORT=6379
    - REDIS_DB=3
    - REDIS_USER=lwe-app
    - REDIS_PASSWORD=${REDIS_PASSWORD}
    - OLLAMA_URL=http://ollama:11434
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    ports:
    - 8005:8005
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:8005/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  infrastructure-recovery-service:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    build:
      context: ./app/infrastructure_recovery_service
      dockerfile: Dockerfile
    image: ai_workflow_engine/infrastructure-recovery-service
    environment:
    - DATABASE_URL=postgresql://app_user:${POSTGRES_PASSWORD}@postgres:5432/ai_workflow_db
    - REDIS_HOST=redis
    - REDIS_PORT=6379
    - REDIS_DB=4
    - REDIS_USER=lwe-app
    - REDIS_PASSWORD=${REDIS_PASSWORD}
    - PROMETHEUS_URL=http://prometheus:9090
    - ALERTMANAGER_URL=http://alertmanager:9093
    - AUTO_SCALING_ENABLED=true
    - ROLLBACK_ENABLED=true
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    ports:
    - 8010:8010
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - type: volume
      source: certs
      target: /tmp/certs-volume
      read_only: true
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:8010/health --max-time 5 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    privileged: true
  postgres:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    build:
      context: .
      dockerfile: docker/postgres/Dockerfile
    security_opt:
    - apparmor:unconfined
    volumes:
    - postgres_data:/var/lib/postgresql/data
    - type: volume
      source: certs
      target: /tmp/certs-volume
      read_only: true
    - ./docker/postgres/01-init-db.sh:/docker-entrypoint-initdb.d/01-init-db.sh:ro
    - ./docker/postgres/docker-entrypoint-wrapper.sh:/usr/local/bin/docker-entrypoint-wrapper.sh:ro
    secrets:
    - POSTGRES_PASSWORD
    environment:
    - POSTGRES_USER=app_user
    - POSTGRES_DB=ai_workflow_db
    - POSTGRES_PASSWORD_FILE=/run/secrets/POSTGRES_PASSWORD
    - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    entrypoint: /usr/local/bin/docker-entrypoint-wrapper.sh
    command:
    - postgres
    - -c
    - ssl=on
    - -c
    - ssl_cert_file=/etc/certs/postgres/server.crt
    - -c
    - ssl_key_file=/etc/certs/postgres/server.key
    - -c
    - ssl_ca_file=/etc/certs/postgres/root.crt
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U app_user -d ai_workflow_engine -h localhost
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  pgbouncer:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    build:
      context: .
      dockerfile: docker/pgbouncer/Dockerfile
    image: ai_workflow_engine/pgbouncer
    volumes:
    - type: volume
      source: certs
      target: /tmp/certs-volume
      read_only: true
    - ./config/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
    - ./docker/pgbouncer/entrypoint-wrapper.sh:/usr/local/bin/entrypoint-wrapper.sh:ro
    secrets:
    - pgbouncer_users
    - POSTGRES_PASSWORD
    security_opt:
    - apparmor:unconfined
    entrypoint: /usr/local/bin/entrypoint-wrapper.sh
    command:
    - su-exec
    - pgbouncer
    - pgbouncer
    - /tmp/pgbouncer.processed.ini
    environment:
    - POSTGRES_HOST=postgres
    - PGBOUNCER_AUTH_FILE=/etc/pgbouncer/generated/pgbouncer_users_processed
    - PGBOUNCER_USER_LIST_FILE=/run/secrets/pgbouncer_users
    - PGBOUNCER_TARGET_USER=app_user
    - POSTGRES_SUPERUSER=app_user
    - POSTGRES_DB=ai_workflow_db
    - POSTGRES_PASSWORD_FILE=/run/secrets/POSTGRES_PASSWORD
    healthcheck:
      test:
      - CMD-SHELL
      - PGPASSWORD=$(cat /run/secrets/POSTGRES_PASSWORD) psql 'host=localhost port=6432
        dbname=pgbouncer user=app_user sslmode=require' -c 'SHOW VERSION;' --quiet
        -w || exit 1
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
  redis:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    image: redis:7-alpine
    volumes:
    - redis_data:/data
    - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    secrets:
    - redis_users_acl
    - REDIS_PASSWORD
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test:
      - CMD-SHELL
      - redis-cli -u redis://lwe-app:$$(cat /run/secrets/REDIS_PASSWORD)@localhost:6379
        ping
      interval: 10s
      timeout: 5s
      retries: 5
  qdrant:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    build:
      context: .
      dockerfile: docker/qdrant/Dockerfile
    image: ai_workflow_engine/qdrant
    volumes:
    - qdrant_data:/qdrant/storage
    - type: volume
      source: certs
      target: /tmp/certs-volume
      read_only: true
    - ./config/qdrant/config.yaml:/qdrant/config/production.yaml:ro
    - ./docker/qdrant/entrypoint-wrapper.sh:/usr/local/bin/entrypoint-wrapper.sh:ro
    - ./docker/qdrant/run.sh:/usr/local/bin/run.sh:ro
    secrets:
    - QDRANT_API_KEY
    entrypoint: /usr/local/bin/entrypoint-wrapper.sh
    command:
    - sh
    - -c
    - exec /usr/local/bin/run.sh
    environment:
    - QDRANT__SERVICE__API_KEY_FILE=/run/secrets/QDRANT_API_KEY
    - SERVICE_NAME=qdrant
    - QDRANT__SERVICE__ENABLE_TLS=true
    - QDRANT__TLS__CERT=/etc/certs/qdrant/unified-cert.pem
    - QDRANT__TLS__KEY=/etc/certs/qdrant/unified-key.pem
    - QDRANT__TLS__CA_CERT=/etc/certs/qdrant/rootCA.pem
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - -k
      - https://localhost:6333/healthz
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
  prometheus:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    build:
      context: .
      dockerfile: docker/prometheus/Dockerfile
    image: ai_workflow_engine/prometheus
    user: root
    ports:
    - 9090:9090
    volumes:
    - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    - prometheus_data:/prometheus
    - type: volume
      source: certs
      target: /tmp/certs-volume
      read_only: true
    - ./docker/prometheus/entrypoint-wrapper.sh:/usr/local/bin/entrypoint-wrapper.sh:ro
    entrypoint: /usr/local/bin/entrypoint-wrapper.sh
    command:
    - /bin/prometheus
    - --storage.tsdb.path=/prometheus
    - --config.file=/etc/prometheus/prometheus.yml
    - --web.listen-address=0.0.0.0:9090
    - --web.enable-admin-api
    - --web.enable-lifecycle
    secrets:
    - QDRANT_API_KEY
    environment:
    - SERVICE_NAME=prometheus
    - RUN_AS_USER=nobody:nobody
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:9090/-/healthy
      - --max-time
      - '2'
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
  grafana:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    image: grafana/grafana:latest
    ports:
    - 3000:3000
    environment:
    - GF_SECURITY_ADMIN_PASSWORD=admin
    - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
    - grafana_data:/var/lib/grafana
    - ./config/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
    - ./config/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:3000/api/health --max-time 3 || exit 1
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      prometheus:
        condition: service_healthy
  alertmanager:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    image: prom/alertmanager:latest
    ports:
    - 9093:9093
    volumes:
    - alertmanager_data:/alertmanager
    - ./config/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    - type: volume
      source: certs
      target: /tmp/certs-volume
      read_only: true
    - ./docker/alertmanager/entrypoint-wrapper.sh:/usr/local/bin/entrypoint-wrapper.sh:ro
    entrypoint:
    - /bin/sh
    - /usr/local/bin/entrypoint-wrapper.sh
    command:
    - /bin/alertmanager
    - --config.file=/etc/alertmanager/alertmanager.yml
    - --storage.path=/alertmanager
    - --web.external-url=http://localhost:9093
    - --web.listen-address=0.0.0.0:9093
    - --cluster.listen-address=
    secrets:
    - API_KEY
    environment:
    - SERVICE_NAME=alertmanager
    healthcheck:
      test:
      - CMD
      - wget
      - --quiet
      - --tries=1
      - --spider
      - http://localhost:9093/-/healthy
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      prometheus:
        condition: service_healthy
  cadvisor:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:ro
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    privileged: true
  redis_exporter:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    build:
      context: .
      dockerfile: docker/redis-exporter/Dockerfile
    image: ai_workflow_engine/redis_exporter
    entrypoint: /usr/local/bin/entrypoint-wrapper.sh
    command:
    - sh
    - -c
    - exec /usr/local/bin/run.sh
    secrets:
    - REDIS_PASSWORD
    environment:
    - SERVICE_NAME=redis_exporter
    volumes:
    - type: volume
      source: certs
      target: /tmp/certs-volume
      read_only: true
    - ./docker/redis-exporter/entrypoint-wrapper.sh:/usr/local/bin/entrypoint-wrapper.sh:ro
    - ./docker/redis-exporter/run.sh:/usr/local/bin/run.sh:ro
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:9121/metrics
      interval: 30s
      timeout: 5s
      retries: 2
    depends_on:
      redis:
        condition: service_healthy
  postgres_exporter:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    build:
      context: .
      dockerfile: docker/postgres-exporter/Dockerfile
    image: ai_workflow_engine/postgres_exporter
    user: root
    entrypoint: /usr/local/bin/entrypoint-wrapper.sh
    command:
    - sh
    - -c
    - export PGPASSWORD=$(cat /run/secrets/POSTGRES_PASSWORD) && exec postgres_exporter
    secrets:
    - POSTGRES_PASSWORD
    environment:
    - DATA_SOURCE_NAME=postgresql://app_user@postgres:5432/ai_workflow_engine?sslmode=require
    - SERVICE_NAME=postgres_exporter
    volumes:
    - type: volume
      source: certs
      target: /tmp/certs-volume
      read_only: true
    - ./docker/postgres-exporter/entrypoint-wrapper.sh:/usr/local/bin/entrypoint-wrapper.sh:ro
    - ./config/postgres_exporter.yml:/postgres_exporter.yml:ro
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:9187/metrics
      interval: 30s
      timeout: 10s
      retries: 2
    depends_on:
      postgres:
        condition: service_healthy
  pgbouncer_exporter:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    build:
      context: .
      dockerfile: docker/pgbouncer-exporter/Dockerfile
    image: ai_workflow_engine/pgbouncer_exporter
    entrypoint: /usr/local/bin/entrypoint-wrapper.sh
    command:
    - sh
    - -c
    - exec /usr/local/bin/run.sh
    secrets:
    - POSTGRES_PASSWORD
    environment:
    - SERVICE_NAME=pgbouncer_exporter
    volumes:
    - type: volume
      source: certs
      target: /tmp/certs-volume
      read_only: true
    - ./docker/pgbouncer-exporter/entrypoint-wrapper.sh:/usr/local/bin/entrypoint-wrapper.sh:ro
    - ./docker/pgbouncer-exporter/run.sh:/usr/local/bin/run.sh:ro
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:9127/metrics
      interval: 30s
      timeout: 5s
      retries: 2
      start_period: 10s
    depends_on:
      pgbouncer:
        condition: service_healthy
  ollama:
    deploy: *id003
    restart: unless-stopped
    networks: *id002
    logging: *id001
    build:
      context: .
      dockerfile: docker/ollama/Dockerfile
    image: ai_workflow_engine/ollama
    ports:
    - 11434:11434
    volumes:
    - ollama_data:/root/.ollama
    environment:
    - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:11434/
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 60s
  ollama-pull-llama:
    image: ollama/ollama
    volumes:
    - ollama_data:/root/.ollama
    - ./scripts/pull_models_if_needed.sh:/usr/local/bin/pull_models_if_needed.sh:ro
    entrypoint: /bin/sh
    command: /usr/local/bin/pull_models_if_needed.sh
    networks:
    - ai_workflow_engine_net
    environment:
    - OLLAMA_HOST=http://ollama:11434
    restart: 'no'
    depends_on:
      ollama:
        condition: service_healthy
  api-migrate:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    image: ai_workflow_engine/api
    entrypoint: /usr/local/bin/entrypoint-wrapper.sh
    command:
    - sh
    - -c
    - exec /usr/local/bin/run-migrate.sh
    restart: 'no'
    networks:
    - ai_workflow_engine_net
    volumes:
    - type: volume
      source: certs
      target: /tmp/certs-volume
      read_only: true
    - ./docker/api/entrypoint-wrapper.sh:/usr/local/bin/entrypoint-wrapper.sh:ro
    - ./docker/api/run-migrate-fixed.sh:/usr/local/bin/run-migrate.sh:ro
    environment:
    - SERVICE_NAME=api
    - PYTHONPATH=/app
    - POSTGRES_HOST=postgres
    - POSTGRES_USER=app_user
    - POSTGRES_PORT=5432
    - POSTGRES_DB=ai_workflow_db
    working_dir: /app
    env_file:
    - .env
    secrets:
    - POSTGRES_PASSWORD
    - JWT_SECRET_KEY
    - API_KEY
    - QDRANT_API_KEY
    - postgres_user
    - postgres_db
    depends_on:
      postgres:
        condition: service_healthy
  api:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    image: ai_workflow_engine/api
    security_opt:
    - apparmor:unconfined
    entrypoint: /usr/local/bin/entrypoint-wrapper.sh
    command:
    - sh
    - -c
    - exec /usr/local/bin/run.sh
    volumes:
    - type: volume
      source: certs
      target: /tmp/certs-volume
      read_only: true
    - ./docker/api/entrypoint-wrapper.sh:/usr/local/bin/entrypoint-wrapper.sh:ro
    - ./docker/api/run.sh:/usr/local/bin/run.sh:ro
    - .:/project:rw
    secrets:
    - POSTGRES_PASSWORD
    - REDIS_PASSWORD
    - JWT_SECRET_KEY
    - CSRF_SECRET_KEY
    - QDRANT_API_KEY
    - API_KEY
    - admin_email
    - admin_password
    - google_client_id
    - google_client_secret
    env_file:
    - .env
    - local.env
    environment:
    - GOOGLE_CLIENT_ID_FILE=/run/secrets/google_client_id
    - GOOGLE_CLIENT_SECRET_FILE=/run/secrets/google_client_secret
    - POSTGRES_HOST=postgres
    - POSTGRES_USER=app_user
    - POSTGRES_PORT=5432
    - PYTHONPATH=/project
    - OLLAMA_API_BASE_URL=http://ollama:11434
    - POSTGRES_DB=ai_workflow_db
    - OLLAMA_GENERATION_MODEL_NAME=llama3.2:3b
    - SERVICE_NAME=api
    working_dir: /project/app
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:8000/health --max-time 3 || exit 1
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      postgres:
        condition: service_healthy
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      ollama:
        condition: service_healthy
  api-create-admin:
    restart: 'no'
    networks:
    - ai_workflow_engine_net
    logging: *id001
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    image: ai_workflow_engine/api
    entrypoint: /usr/local/bin/entrypoint-wrapper.sh
    command:
    - sh
    - -c
    - exec /app/scripts/create_admin.sh
    volumes:
    - type: volume
      source: certs
      target: /tmp/certs-volume
      read_only: true
    - ./docker/api/entrypoint-wrapper.sh:/usr/local/bin/entrypoint-wrapper.sh:ro
    - ./scripts/create_admin.sh:/app/scripts/create_admin.sh:ro
    environment:
    - SERVICE_NAME=api
    - PYTHONPATH=/app
    - POSTGRES_HOST=postgres
    - POSTGRES_USER=app_user
    - POSTGRES_PORT=5432
    - POSTGRES_DB=ai_workflow_db
    working_dir: /app
    secrets:
    - POSTGRES_PASSWORD
    - JWT_SECRET_KEY
    - API_KEY
    - QDRANT_API_KEY
    - admin_email
    - admin_password
    depends_on:
      api-migrate:
        condition: service_completed_successfully
  worker:
    deploy: *id003
    restart: unless-stopped
    networks: *id002
    logging: *id001
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    image: ai_workflow_engine/worker
    security_opt:
    - apparmor:unconfined
    entrypoint: /usr/local/bin/entrypoint-wrapper.sh
    command:
    - sh
    - -c
    - exec /usr/local/bin/run.sh
    volumes:
    - type: volume
      source: certs
      target: /tmp/certs-volume
      read_only: true
    - ./docker/worker/entrypoint-wrapper.sh:/usr/local/bin/entrypoint-wrapper.sh:ro
    - ./docker/worker/run.sh:/usr/local/bin/run.sh:ro
    - ./docker/worker/healthcheck.sh:/usr/local/bin/healthcheck.sh:ro
    - ./app:/app:rw
    secrets:
    - POSTGRES_PASSWORD
    - JWT_SECRET_KEY
    - QDRANT_API_KEY
    - API_KEY
    - REDIS_PASSWORD
    - google_client_id
    - google_client_secret
    env_file:
    - .env
    environment:
    - SERVICE_NAME=worker
    - PYTHONPATH=/
    - OLLAMA_API_BASE_URL=http://ollama:11434
    - POSTGRES_HOST=pgbouncer
    - POSTGRES_USER=app_user
    - POSTGRES_PORT=6432
    - POSTGRES_DB=ai_workflow_db
    - OLLAMA_GENERATION_MODEL_NAME=llama3.2:3b
    working_dir: /app
    healthcheck:
      test:
      - CMD-SHELL
      - /usr/local/bin/healthcheck.sh
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 120s
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama-pull-llama:
        condition: service_completed_successfully
      ollama:
        condition: service_healthy
      qdrant:
        condition: service_healthy
  webui:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    build:
      context: ./app/webui-next
      dockerfile: ../../docker/webui-next/Dockerfile
    image: ai_workflow_engine/webui-next
    command:
    - node
    - server.js
    volumes:
    - type: volume
      source: certs
      target: /tmp/certs-volume
      read_only: true
    environment:
    - SERVICE_NAME=webui-next
    - NODE_ENV=production
    - PORT=3001
    - HOSTNAME=0.0.0.0
    - NEXT_TELEMETRY_DISABLED=1
    - API_URL=http://api:8000
    - WS_URL=ws://api:8000
    working_dir: /app
    healthcheck:
      test:
      - CMD-SHELL
      - wget --quiet --tries=1 --spider --timeout=3 http://0.0.0.0:3001/ || exit 1
      interval: 25s
      timeout: 5s
      retries: 3
      start_period: 45s
    depends_on:
      api:
        condition: service_healthy
  caddy_reverse_proxy:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    image: caddy:2-alpine
    entrypoint: /usr/local/bin/entrypoint-wrapper.sh
    command:
    - caddy
    - run
    - --config
    - /etc/caddy/Caddyfile
    - --adapter
    - caddyfile
    ports:
    - 80:80
    - 443:443
    - 8443:8443
    volumes:
    - ./config/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
    - caddy_data:/data
    - caddy_config:/config
    - ./docker/caddy_reverse_proxy/entrypoint-wrapper.sh:/usr/local/bin/entrypoint-wrapper.sh:ro
    environment:
    - SERVICE_NAME=caddy_reverse_proxy
    - DOMAIN=${DOMAIN:-aiwfe.com}
    - DNS_PROVIDER=${DNS_PROVIDER:-cloudflare}
    - DNS_API_TOKEN=${DNS_API_TOKEN}
    - ACME_EMAIL=${ACME_EMAIL:-markuszvirbulis@gmail.com}
    healthcheck:
      test:
      - CMD
      - wget
      - --quiet
      - --tries=1
      - --spider
      - http://127.0.0.1:2019/config/
      interval: 15s
      timeout: 3s
      retries: 3
    depends_on:
      api:
        condition: service_healthy
      webui:
        condition: service_started
  node_exporter:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    image: prom/node-exporter:latest
    command:
    - --path.procfs=/host/proc
    - --path.rootfs=/rootfs
    - --path.sysfs=/host/sys
    - --collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)
    volumes:
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /:/rootfs:ro
    healthcheck:
      test:
      - CMD
      - wget
      - --quiet
      - --tries=1
      - --spider
      - http://localhost:9100/metrics
      interval: 30s
      timeout: 30s
      retries: 2
  blackbox_exporter:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    image: prom/blackbox-exporter:latest
    volumes:
    - ./config/blackbox/blackbox.yml:/config/blackbox.yml:ro
    command:
    - --config.file=/config/blackbox.yml
    healthcheck:
      test:
      - CMD
      - wget
      - --quiet
      - --tries=1
      - --spider
      - http://localhost:9115/metrics
      interval: 30s
      timeout: 10s
      retries: 2
  jaeger:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    image: jaegertracing/all-in-one:latest
    environment:
    - COLLECTOR_OTLP_ENABLED=true
    - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
    - 16686:16686
    - 14268:14268
    - 6831:6831/udp
    - 6832:6832/udp
    volumes:
    - jaeger_data:/badger
    healthcheck:
      test:
      - CMD
      - wget
      - --quiet
      - --tries=1
      - --spider
      - http://localhost:14269/
      interval: 30s
      timeout: 10s
      retries: 3
  loki:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    image: grafana/loki:latest
    volumes:
    - ./config/loki/loki.yml:/etc/loki/local-config.yaml:ro
    - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test:
      - CMD
      - wget
      - --quiet
      - --tries=1
      - --spider
      - http://localhost:3100/ready
      interval: 30s
      timeout: 10s
      retries: 3
  promtail:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    image: grafana/promtail:latest
    volumes:
    - ./config/promtail/promtail.yml:/etc/promtail/config.yml:ro
    - /var/log:/var/log:ro
    - ./logs:/app/logs:ro
    - /var/lib/docker/containers:/var/lib/docker/containers:ro
    - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      loki:
        condition: service_healthy
  elasticsearch:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
    - node.name=elasticsearch
    - cluster.name=ai-workflow-logs
    - discovery.type=single-node
    - bootstrap.memory_lock=true
    - ES_JAVA_OPTS=-Xms512m -Xmx512m
    - xpack.security.enabled=false
    - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
    - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
    - 9200:9200
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:9200/_cluster/health
      interval: 30s
      timeout: 10s
      retries: 5
  kibana:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    image: docker.elastic.co/kibana/kibana:8.11.0
    environment:
    - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    - SERVER_NAME=kibana
    - SERVER_HOST=0.0.0.0
    ports:
    - 5601:5601
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:5601/api/status
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      elasticsearch:
        condition: service_healthy
  logstash:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    image: docker.elastic.co/logstash/logstash:8.11.0
    volumes:
    - ./config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    - ./config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    environment:
    - LS_JAVA_OPTS=-Xmx256m -Xms256m
    depends_on:
      elasticsearch:
        condition: service_healthy
  fluent_bit:
    restart: unless-stopped
    networks: *id002
    logging: *id001
    image: fluent/fluent-bit:latest
    volumes:
    - ./config/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    - ./logs:/app/logs:ro
    - /var/lib/docker/containers:/var/lib/docker/containers:ro
    depends_on:
      loki:
        condition: service_healthy
  log-watcher:
    image: docker:27.1-cli
    container_name: ai_workflow_engine-log-watcher-1
    restart: always
    networks:
    - ai_workflow_engine_net
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - ./scripts:/app/scripts:rw
    - ./logs:/app/logs
    - ./app:/app/application:ro
    command:
    - sh
    - -c
    - apk add --no-cache bash jq && bash /app/scripts/_comprehensive_logger.sh
