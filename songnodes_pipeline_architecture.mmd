graph TB
    %% Styling
    classDef frontend fill:#E8F4FD,stroke:#2196F3,stroke-width:2px
    classDef api fill:#FFF3E0,stroke:#FF9800,stroke-width:2px
    classDef orchestrator fill:#F3E5F5,stroke:#9C27B0,stroke-width:2px
    classDef scraper fill:#E8F5E9,stroke:#4CAF50,stroke-width:2px
    classDef database fill:#FCE4EC,stroke:#E91E63,stroke-width:2px
    classDef cache fill:#FFEBEE,stroke:#F44336,stroke-width:2px
    classDef queue fill:#EDE7F6,stroke:#673AB7,stroke-width:2px

    %% Frontend Layer
    subgraph "Frontend (React + Zustand)"
        FE_Main[Frontend App<br/>Port: 3006]:::frontend
        FE_Target[Target Tracks Manager<br/>🎯 Add/Edit/Delete tracks]:::frontend
        FE_Graph[Graph Visualization<br/>D3.js Force Layout]:::frontend
        FE_DJ[DJ Interface<br/>Virtual Mixing]:::frontend
        FE_Stats[Statistics Panel<br/>Performance Metrics]:::frontend

        FE_Main --> FE_Target
        FE_Main --> FE_Graph
        FE_Main --> FE_DJ
        FE_Main --> FE_Stats
    end

    %% API Layer
    subgraph "API Gateway & Services"
        API_GW[API Gateway<br/>Port: 8080]:::api
        REST_API[REST API Enhanced<br/>Port: 8082<br/>Target Track Endpoints]:::api
        GRAPH_API[Graph API<br/>Port: 8084]:::api
        WS_API[WebSocket API<br/>Port: 8083]:::api

        API_GW --> REST_API
        API_GW --> GRAPH_API
        API_GW --> WS_API
    end

    %% Orchestration Layer
    subgraph "Orchestration & Discovery"
        ORCH[Scraper Orchestrator<br/>Port: 8001]:::orchestrator
        SEARCHER[Target Track Searcher<br/>🔍 Missing Link Component]:::orchestrator

        ORCH --> SEARCHER
    end

    %% Message Queue
    subgraph "Message Queue"
        RABBIT[RabbitMQ<br/>Port: 5673]:::queue
        REDIS[Redis Cache<br/>Port: 6380<br/>Task Queue]:::cache
    end

    %% Scraper Services
    subgraph "Scraper Fleet"
        SCRAPER_1001[1001tracklists Scraper<br/>Port: 8011]:::scraper
        SCRAPER_MIX[MixesDB Scraper<br/>Port: 8012]:::scraper
        SCRAPER_SET[Setlist.fm Scraper<br/>Port: 8013]:::scraper
        OLLAMA[Ollama LLM<br/>Port: 11434<br/>HTML Adaptation]:::scraper

        SCRAPER_1001 --> OLLAMA
        SCRAPER_MIX --> OLLAMA
        SCRAPER_SET --> OLLAMA
    end

    %% Database Schema
    subgraph "PostgreSQL Database (Port: 5433)"
        subgraph "Target Discovery Tables"
            TARGET_TRACKS[target_tracks<br/>━━━━━━━━━━━━<br/>
                track_id: UUID PK<br/>
                title: VARCHAR(500)<br/>
                artist: VARCHAR(255)<br/>
                priority: VARCHAR(20)<br/>
                search_terms: TEXT[]<br/>
                genres: TEXT[]<br/>
                last_searched: TIMESTAMP<br/>
                times_searched: INT<br/>
                playlists_found: INT<br/>
                adjacencies_found: INT<br/>
                is_active: BOOLEAN<br/>
                added_at: TIMESTAMP<br/>
                updated_at: TIMESTAMP<br/>
                ━━━━━━━━━━━━<br/>
                📊 145 records]:::database

            PLAYLIST_DISC[playlist_discovery<br/>━━━━━━━━━━━━<br/>
                playlist_id: UUID FK<br/>
                discovered_via_track: UUID FK<br/>
                discovery_timestamp: TIMESTAMP<br/>
                search_platform: VARCHAR(50)<br/>
                ━━━━━━━━━━━━<br/>
                📊 0 records]:::database

            TARGET_SEARCHES[target_track_searches<br/>━━━━━━━━━━━━<br/>
                target_title: VARCHAR<br/>
                target_artist: VARCHAR<br/>
                search_query: TEXT<br/>
                scraper_name: VARCHAR<br/>
                results_found: INT<br/>
                playlists_containing: INT<br/>
                search_timestamp: TIMESTAMP<br/>
                ━━━━━━━━━━━━<br/>
                📊 0 records]:::database
        end

        subgraph "Core Music Tables"
            SONGS[songs<br/>━━━━━━━━━━━━<br/>
                song_id: UUID PK<br/>
                title: VARCHAR(500)<br/>
                primary_artist_id: UUID FK<br/>
                release_year: INT<br/>
                genre: VARCHAR(100)<br/>
                bpm: INT<br/>
                key: VARCHAR(10)<br/>
                duration_seconds: INT<br/>
                spotify_id: VARCHAR(100)<br/>
                musicbrainz_id: VARCHAR(100)<br/>
                isrc: VARCHAR(20)<br/>
                label: VARCHAR(255)<br/>
                remix_of: UUID<br/>
                created_at: TIMESTAMP<br/>
                updated_at: TIMESTAMP<br/>
                ━━━━━━━━━━━━<br/>
                📊 12 records]:::database

            ARTISTS[artists<br/>━━━━━━━━━━━━<br/>
                artist_id: UUID PK<br/>
                name: VARCHAR(255)<br/>
                spotify_id: VARCHAR(100)<br/>
                musicbrainz_id: VARCHAR(100)<br/>
                genres: TEXT[]<br/>
                country: VARCHAR(100)<br/>
                aliases: TEXT[]<br/>
                created_at: TIMESTAMP<br/>
                updated_at: TIMESTAMP<br/>
                ━━━━━━━━━━━━<br/>
                📊 12 records]:::database

            ADJACENCY[song_adjacency<br/>━━━━━━━━━━━━<br/>
                song_id_1: UUID FK<br/>
                song_id_2: UUID FK<br/>
                occurrence_count: INT<br/>
                avg_distance: NUMERIC(3,2)<br/>
                ━━━━━━━━━━━━<br/>
                📊 30 records<br/>
                ⚡ Graph Edges]:::database
        end

        subgraph "Playlist Tables"
            PLAYLISTS[playlists<br/>━━━━━━━━━━━━<br/>
                playlist_id: UUID PK<br/>
                name: VARCHAR(500)<br/>
                source: VARCHAR(50)<br/>
                source_url: TEXT UNIQUE<br/>
                playlist_type: VARCHAR(50)<br/>
                dj_artist_id: UUID FK<br/>
                event_name: VARCHAR(500)<br/>
                venue_id: UUID FK<br/>
                event_date: DATE<br/>
                duration_minutes: INT<br/>
                tracklist_count: INT<br/>
                play_count: INT<br/>
                like_count: INT<br/>
                created_at: TIMESTAMP<br/>
                updated_at: TIMESTAMP<br/>
                ━━━━━━━━━━━━<br/>
                📊 0 records<br/>
                ⚠️ Not populating]:::database

            PLAYLIST_SONGS[playlist_songs<br/>━━━━━━━━━━━━<br/>
                playlist_id: UUID FK<br/>
                song_id: UUID FK<br/>
                position: INT<br/>
                added_at: TIMESTAMP<br/>
                ━━━━━━━━━━━━<br/>
                📊 0 records]:::database

            VENUES[venues<br/>━━━━━━━━━━━━<br/>
                venue_id: UUID PK<br/>
                name: VARCHAR(255)<br/>
                city: VARCHAR(100)<br/>
                state: VARCHAR(100)<br/>
                country: VARCHAR(100)<br/>
                latitude: DECIMAL<br/>
                longitude: DECIMAL<br/>
                capacity: INT<br/>
                venue_type: VARCHAR(50)<br/>
                created_at: TIMESTAMP<br/>
                updated_at: TIMESTAMP<br/>
                ━━━━━━━━━━━━<br/>
                📊 0 records]:::database
        end

        subgraph "Relationship Tables"
            SONG_ARTISTS[song_artists<br/>━━━━━━━━━━━━<br/>
                song_id: UUID FK<br/>
                artist_id: UUID FK<br/>
                role: VARCHAR(50)<br/>
                position: INT<br/>
                ━━━━━━━━━━━━<br/>
                📊 0 records]:::database

            ARTIST_COLLAB[artist_collaborations<br/>━━━━━━━━━━━━<br/>
                artist_id_1: UUID FK<br/>
                artist_id_2: UUID FK<br/>
                collaboration_count: INT<br/>
                ━━━━━━━━━━━━<br/>
                📊 0 records]:::database
        end

        subgraph "Operations Tables"
            SCRAPING_RUNS[scraping_runs<br/>━━━━━━━━━━━━<br/>
                run_id: UUID PK<br/>
                scraper_name: VARCHAR<br/>
                start_time: TIMESTAMP<br/>
                end_time: TIMESTAMP<br/>
                status: VARCHAR<br/>
                items_scraped: INT<br/>
                errors_count: INT<br/>
                ━━━━━━━━━━━━<br/>
                📊 0 records]:::database
        end
    end

    %% Data Flow Connections
    FE_Target -.->|"1. User adds<br/>target track"| REST_API
    REST_API -.->|"2. Save to DB"| TARGET_TRACKS

    ORCH -->|"3. Load targets<br/>(Should use DB)"| TARGET_TRACKS
    SEARCHER -->|"4. Search platforms<br/>for playlists"| RABBIT

    RABBIT -->|"5. Queue scraping<br/>tasks"| SCRAPER_1001
    RABBIT --> SCRAPER_MIX
    RABBIT --> SCRAPER_SET

    SCRAPER_1001 -->|"6. Store tracks &<br/>adjacencies"| SONGS
    SCRAPER_1001 --> ADJACENCY
    SCRAPER_1001 -.->|"Should store"| PLAYLISTS

    GRAPH_API -->|"7. Fetch graph data"| ADJACENCY
    GRAPH_API --> SONGS
    FE_Graph -->|"8. Display graph"| GRAPH_API

    %% Cache connections
    REST_API --> REDIS
    ORCH --> REDIS

    %% Missing connections (dashed)
    ORCH -.->|"❌ Not using DB yet"| TARGET_TRACKS
    SEARCHER -.->|"❌ Not implemented"| TARGET_SEARCHES

    %% Legend
    subgraph "Legend"
        L1[Solid Arrow = Working]
        L2[Dashed Arrow = Not Implemented]
        L3[📊 = Record Count]
        L4[⚠️ = Issue/Not Working]
        L5[⚡ = Powers Graph Visualization]
    end