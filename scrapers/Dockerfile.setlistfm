FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Install FastAPI, uvicorn, and requests for API
RUN pip install fastapi uvicorn requests

# Copy scrapy project
COPY . .

# Create output directory
RUN mkdir -p /app/output

# Expose port for API
EXPOSE 8013

# Create a simple API server
RUN cat > /app/scraper_api.py << 'EOF'
from fastapi import FastAPI, HTTPException
import subprocess
import json
import os
import tempfile
from typing import Dict, Any, Optional

app = FastAPI(title="SetlistFM Scraper", version="1.0.0")

@app.get("/health")
async def health_check():
    return {"status": "healthy", "scraper": "setlistfm"}

@app.post("/scrape")
async def scrape_url(request: Dict[str, Any]):
    params = request.get("params", {})
    task_id = request.get("task_id", "default")
    url = request.get("url")  # Optional for API-based scraping

    # API Key validation
    api_key = os.getenv('SETLISTFM_API_KEY')
    if not api_key:
        raise HTTPException(status_code=500, detail="SETLISTFM_API_KEY not configured")

    try:
        # Build scrapy command with API parameters
        cmd = [
            "scrapy", "crawl", "setlistfm",
            "-L", "INFO",
            "-o", f"/app/output/{task_id}_setlistfm.json"
        ]

        # Add search parameters as spider arguments
        if params.get("artistName"):
            cmd.extend(["-a", f"artistName={params['artistName']}"])

        if params.get("setlist_id"):
            cmd.extend(["-a", f"setlist_id={params['setlist_id']}"])

        if params.get("venue"):
            cmd.extend(["-a", f"venue={params['venue']}"])

        if params.get("city"):
            cmd.extend(["-a", f"city={params['city']}"])

        if params.get("date"):
            cmd.extend(["-a", f"date={params['date']}"])

        # Add environment variable for API key
        env = os.environ.copy()
        env['SETLISTFM_API_KEY'] = api_key

        result = subprocess.run(cmd, capture_output=True, text=True, cwd="/app", env=env)

        if result.returncode != 0:
            raise HTTPException(status_code=500, detail=f"Scrapy failed: {result.stderr}")

        return {
            "status": "success",
            "task_id": task_id,
            "params": params,
            "output_file": f"/app/output/{task_id}_setlistfm.json"
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8013)
EOF

# Start the API server
CMD ["python", "/app/scraper_api.py"]