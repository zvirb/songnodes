#!/bin/bash

# MusicDB Development Quick Start Script
# This script starts the essential services for testing the data pipeline

set -e

echo "üéµ MusicDB Development Environment Startup"
echo "=========================================="

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker is not running. Please start Docker first."
    exit 1
fi

# Check if .env file exists
if [ ! -f .env ]; then
    echo "‚ö†Ô∏è  .env file not found. Creating from example..."
    cp .env.example .env
    echo "‚úÖ Created .env file. Please update with your API keys."
fi

echo ""
echo "üì¶ Starting core services..."
echo "----------------------------"

# Start database and message broker first
echo "1Ô∏è‚É£  Starting PostgreSQL (port 5433)..."
docker compose up -d postgres

echo "‚è≥ Waiting for PostgreSQL to be ready..."
sleep 10
docker compose exec -T postgres pg_isready -U musicdb_user || echo "‚ö†Ô∏è  PostgreSQL may need more time to start"

echo "2Ô∏è‚É£  Starting Redis (port 6380)..."
docker compose up -d redis

echo "3Ô∏è‚É£  Starting RabbitMQ (port 5673)..."
docker compose up -d rabbitmq

echo ""
echo "üï∑Ô∏è  Building and starting scraping services..."
echo "---------------------------------------------"

# Build scraper images
echo "4Ô∏è‚É£  Building scraper orchestrator..."
docker compose build scraper-orchestrator

echo "5Ô∏è‚É£  Building 1001tracklists scraper..."
docker compose build scraper-1001tracklists || echo "‚ö†Ô∏è  Build failed - missing dependencies"

echo "6Ô∏è‚É£  Building MixesDB scraper..."
docker compose build scraper-mixesdb || echo "‚ö†Ô∏è  Build failed - missing dependencies"

# Start scraping services
echo "7Ô∏è‚É£  Starting scraper orchestrator (port 8001)..."
docker compose up -d scraper-orchestrator

echo ""
echo "‚úÖ Core services started!"
echo ""
echo "üìä Service Status:"
echo "-----------------"
docker compose ps

echo ""
echo "üîó Access Points:"
echo "----------------"
echo "‚Ä¢ Scraper Orchestrator: http://localhost:8001"
echo "‚Ä¢ Orchestrator Health:  http://localhost:8001/health"
echo "‚Ä¢ Scraper Status:       http://localhost:8001/scrapers/status"
echo "‚Ä¢ Queue Status:         http://localhost:8001/queue/status"
echo "‚Ä¢ PostgreSQL:           localhost:5433 (user: musicdb_user)"
echo "‚Ä¢ Redis:                localhost:6380"
echo "‚Ä¢ RabbitMQ Management:  http://localhost:15673"

echo ""
echo "üìù Quick Test Commands:"
echo "----------------------"
echo "# Check orchestrator health:"
echo "curl http://localhost:8001/health"
echo ""
echo "# Submit a test scraping task:"
echo 'curl -X POST http://localhost:8001/tasks/submit \
  -H "Content-Type: application/json" \
  -d "{\"scraper\": \"1001tracklists\", \"priority\": \"high\"}"'
echo ""
echo "# Check database connection:"
echo "docker compose exec postgres psql -U musicdb_user -d musicdb -c '\\dt'"

echo ""
echo "üìö Next Steps:"
echo "-------------"
echo "1. Add your API keys to .env file"
echo "2. Test scraper endpoints"
echo "3. Monitor logs: docker compose logs -f"
echo "4. Stop services: docker compose down"

echo ""
echo "üéâ Development environment is ready!"