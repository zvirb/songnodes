const { chromium } = require('playwright');

async function testVisualization() {
  console.log('üîç Starting browser test for SongNodes visualization...');

  const browser = await chromium.launch({ headless: false, slowMo: 1000 });
  const context = await browser.newContext();
  const page = await context.newPage();

  // Capture console messages
  const consoleMessages = [];
  page.on('console', msg => {
    const message = `[${msg.type()}] ${msg.text()}`;
    consoleMessages.push(message);
    console.log(`üñ•Ô∏è  Console: ${message}`);
  });

  // Capture errors
  const errors = [];
  page.on('pageerror', error => {
    const message = `‚ùå Page Error: ${error.message}`;
    errors.push(message);
    console.log(message);
  });

  try {
    console.log('üìÇ Navigating to http://localhost:3006...');
    await page.goto('http://localhost:3006');

    console.log('‚è≥ Waiting 5 seconds for app initialization...');
    await page.waitForTimeout(5000);

    // Check if the main app container exists
    const appContainer = await page.locator('[data-testid="graph-container"]').count();
    console.log(`üìä Graph container found: ${appContainer > 0 ? '‚úÖ YES' : '‚ùå NO'}`);

    // Check for node and edge counts in the sidebar
    const nodeCount = await page.locator('[data-testid="node-count"]').textContent();
    const edgeCount = await page.locator('[data-testid="edge-count"]').textContent();
    console.log(`üéµ Node count displayed: ${nodeCount || 'Not found'}`);
    console.log(`üîó Edge count displayed: ${edgeCount || 'Not found'}`);

    // Check for Redux state in devtools
    await page.waitForTimeout(2000);

    // Look for specific console messages we expect
    const expectedMessages = [
      'üöÄ App useEffect: nodes.length',
      'üì• Loading local graph data',
      '‚úÖ Setting nodes and edges',
      'üìä Redux State Update',
      'üéØ Redux setNodes: Set',
      'üîó Redux setEdges: Set'
    ];

    console.log('\nüìã Checking for expected console messages:');
    expectedMessages.forEach(expected => {
      const found = consoleMessages.some(msg => msg.includes(expected));
      console.log(`   ${found ? '‚úÖ' : '‚ùå'} "${expected}"`);
    });

    console.log('\nüìù All Console Messages:');
    consoleMessages.forEach((msg, i) => {
      console.log(`   ${i + 1}. ${msg}`);
    });

    if (errors.length > 0) {
      console.log('\nüö® JavaScript Errors Found:');
      errors.forEach((error, i) => {
        console.log(`   ${i + 1}. ${error}`);
      });
    } else {
      console.log('\n‚úÖ No JavaScript errors detected!');
    }

    // Take a screenshot
    await page.screenshot({ path: 'visualization-test.png', fullPage: true });
    console.log('üì∏ Screenshot saved as visualization-test.png');

  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
  } finally {
    await browser.close();
  }
}

testVisualization().catch(console.error);