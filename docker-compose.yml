services:
  # ===========================================
  # DATABASE LAYER
  # ===========================================

  postgres:
    image: public.ecr.aws/docker/library/postgres:15-alpine
    container_name: musicdb-postgres
    restart: always
    ports:
      - "5433:5432"  # Non-standard port
    environment:
      POSTGRES_DB: musicdb
      POSTGRES_USER: musicdb_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    networks:
      - musicdb-backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U musicdb_user -d musicdb"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 6G
        reservations:
          cpus: '2.0'
          memory: 3G

  # Connection pooling service
  db-connection-pool:
    build:
      context: ./services/db-connection-pool
      dockerfile: Dockerfile
    container_name: musicdb-connection-pool
    restart: always
    ports:
      - "6433:6432"  # PgBouncer port (changed to avoid conflict)
      - "8025:8025"  # Management API port
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: musicdb_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass}
      POSTGRES_DB: musicdb
      PGBOUNCER_ADMIN_USER: pgbouncer
      PGBOUNCER_ADMIN_PASSWORD: ${PGBOUNCER_ADMIN_PASSWORD:-pgbouncer_admin_pass_2024}
    depends_on:
      - postgres
    networks:
      - musicdb-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8025/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  redis:
    image: public.ecr.aws/docker/library/redis:7-alpine
    container_name: musicdb-redis
    restart: always
    ports:
      - "6380:6379"  # Non-standard port
    command: redis-server --appendonly yes --maxmemory 2048mb --maxmemory-policy allkeys-lru --maxclients 10000 --tcp-keepalive 60
    volumes:
      - redis_data:/data
    networks:
      - musicdb-backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # ===========================================
  # MESSAGE BROKER
  # ===========================================

  rabbitmq:
    image: public.ecr.aws/docker/library/rabbitmq:3.12-management-alpine
    container_name: musicdb-rabbitmq
    restart: always
    ports:
      - "5673:5672"    # AMQP non-standard port
      - "15673:15672"  # Management UI non-standard port
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-musicdb}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-musicdb_pass}
      RABBITMQ_DEFAULT_VHOST: musicdb
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - musicdb-backend
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # ===========================================
  # SCRAPING SERVICES
  # ===========================================

  scraper-orchestrator:
    build:
      context: ./services/scraper-orchestrator
      dockerfile: Dockerfile
    container_name: scraper-orchestrator
    restart: always
    ports:
      - "8001:8001"
    volumes:
      - ./scrapers/target_tracks_for_scraping.json:/app/target_tracks_for_scraping.json:ro
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass}@db-connection-pool:6432/musicdb
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - musicdb-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  scraper-1001tracklists:
    build:
      context: ./scrapers
      dockerfile: Dockerfile.1001tracklists
    restart: always
    expose:
      - "8011"
    volumes:
      - ./scrapers/target_tracks_for_scraping.json:/app/target_tracks_for_scraping.json:ro
    environment:
      SCRAPER_NAME: 1001tracklists
      REDIS_HOST: redis
      REDIS_PORT: 6379
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass}@db-connection-pool:6432/musicdb
    depends_on:
      - scraper-orchestrator
    networks:
      - musicdb-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8011/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  scraper-mixesdb:
    build:
      context: ./scrapers
      dockerfile: Dockerfile.mixesdb
    restart: always
    expose:
      - "8012"
    volumes:
      - ./scrapers/target_tracks_for_scraping.json:/app/target_tracks_for_scraping.json:ro
    environment:
      SCRAPER_NAME: mixesdb
      REDIS_HOST: redis
      REDIS_PORT: 6379
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass}@db-connection-pool:6432/musicdb
      CONCURRENT_REQUESTS: 6
      DOWNLOAD_DELAY: 1.5
    depends_on:
      - scraper-orchestrator
    networks:
      - musicdb-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8012/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  scraper-setlistfm:
    build:
      context: ./scrapers
      dockerfile: Dockerfile.setlistfm
    restart: always
    expose:
      - "8013"
    environment:
      SCRAPER_NAME: setlistfm
      SETLISTFM_API_KEY: ${SETLISTFM_API_KEY}
      REDIS_HOST: redis
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass}@db-connection-pool:6432/musicdb
      RATE_LIMIT: 3600
      REQUEST_DELAY: 1
    depends_on:
      - scraper-orchestrator
    networks:
      - musicdb-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8013/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  scraper-reddit:
    build:
      context: ./scrapers
      dockerfile: Dockerfile.reddit
    restart: always
    expose:
      - "8014"
    environment:
      SCRAPER_NAME: reddit
      REDDIT_CLIENT_ID: ${REDDIT_CLIENT_ID}
      REDDIT_CLIENT_SECRET: ${REDDIT_CLIENT_SECRET}
      REDIS_HOST: redis
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass}@db-connection-pool:6432/musicdb
    depends_on:
      - scraper-orchestrator
      - nlp-processor
    networks:
      - musicdb-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8014/health"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ===========================================
  # DATA PROCESSING SERVICES
  # ===========================================

  data-transformer:
    build:
      context: ./services/data-transformer
      dockerfile: Dockerfile
    restart: always
    expose:
      - "8002"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: musicdb
      POSTGRES_USER: musicdb_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass}
      BATCH_SIZE: 100
      LOG_LEVEL: INFO
    depends_on:
      - postgres
      - redis
    networks:
      - musicdb-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  nlp-processor:
    build:
      context: ./services/nlp-processor
      dockerfile: Dockerfile
    container_name: nlp-processor
    restart: always
    ports:
      - "8021:8021"
    environment:
      MODEL_PATH: /models
      REDIS_HOST: redis
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass}@db-connection-pool:6432/musicdb
    volumes:
      - nlp_models:/models
    depends_on:
      - redis
    networks:
      - musicdb-backend
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request; urllib.request.urlopen(\"http://127.0.0.1:8021/health\")' || exit 1"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 180s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G

  data-validator:
    build:
      context: ./services/data-validator
      dockerfile: Dockerfile
    container_name: data-validator
    restart: always
    ports:
      - "8003:8003"
    environment:
      REDIS_HOST: redis
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: musicdb
      POSTGRES_USER: musicdb_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass}
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass}@postgres:5432/musicdb
      VALIDATION_BATCH_SIZE: 100
      VALIDATION_WORKERS: 4
    depends_on:
      - postgres
      - redis
    networks:
      - musicdb-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.75'
          memory: 768M

  # AI-powered HTML analysis service with GPU acceleration
  ollama:
    image: ollama/ollama:latest
    container_name: ollama-ai
    restart: always
    runtime: nvidia
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - musicdb-backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:11434/api/tags || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # ===========================================
  # API LAYER
  # ===========================================

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    restart: always
    ports:
      - "8080:8080"
    environment:
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_REQUESTS: 100
      RATE_LIMIT_WINDOW: 60
    depends_on:
      - rest-api
      - graphql-api
      - websocket-api
      - graph-visualization-api
      - enhanced-visualization-service
    networks:
      - musicdb-backend
      - musicdb-frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  rest-api:
    build:
      context: ./services/rest-api
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8082:8082"
    environment:
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass}@postgres:5432/musicdb
      REDIS_HOST: redis
      REDIS_PORT: 6379
      API_VERSION: v1
      CONNECTION_POOL_SIZE: 50
      MAX_OVERFLOW: 20
    depends_on:
      - postgres
      - redis
    networks:
      - musicdb-backend
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request; urllib.request.urlopen(\"http://127.0.0.1:8082/health\")' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.75'
          memory: 768M

  graphql-api:
    build:
      context: ./services/graphql-api
      dockerfile: Dockerfile
    container_name: graphql-api
    restart: always
    ports:
      - "8081:8081"
    environment:
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass}@db-connection-pool:6432/musicdb
      REDIS_HOST: redis
      ENABLE_PLAYGROUND: ${ENABLE_PLAYGROUND:-false}
      QUERY_COMPLEXITY_LIMIT: 1000
      QUERY_DEPTH_LIMIT: 15
    depends_on:
      - postgres
      - redis
    networks:
      - musicdb-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  websocket-api:
    build:
      context: ./services/websocket-api
      dockerfile: Dockerfile
    container_name: websocket-api
    restart: always
    ports:
      - "8083:8083"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      WS_MAX_CONNECTIONS: 10000
      WS_HEARTBEAT_INTERVAL: 30
    depends_on:
      - redis
      - rabbitmq
    networks:
      - musicdb-backend
      - musicdb-frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.75'
          memory: 768M

  graph-visualization-api:
    build:
      context: ./services/graph-visualization-api
      dockerfile: Dockerfile
    container_name: graph-visualization-api
    restart: always
    ports:
      - "8084:8084"
    environment:
      DATABASE_URL: postgresql+asyncpg://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass}@db-connection-pool:6432/musicdb
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CACHE_TTL: 300
      MAX_CONNECTIONS: 1000
      CONNECTION_POOL_SIZE: 20
      CONNECTION_POOL_MAX_OVERFLOW: 10
    depends_on:
      - postgres
      - redis
    networks:
      - musicdb-backend
      - musicdb-frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  enhanced-visualization-service:
    build:
      context: ./services/enhanced-visualization-service
      dockerfile: Dockerfile
    container_name: enhanced-visualization-service
    restart: always
    ports:
      - "8090:8085"  # Primary API and WebSocket port
    environment:
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass}@db-connection-pool:6432/musicdb
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NODE_ENV: production
      LOG_LEVEL: info
      CACHE_TTL: 300
      MAX_CONNECTIONS: 1000
      WS_HEARTBEAT_INTERVAL: 30
      CORS_ORIGIN: "*"
      RATE_LIMIT_MAX: 100
      RATE_LIMIT_WINDOW: 60000
    depends_on:
      - postgres
      - redis
      - db-connection-pool
    networks:
      - musicdb-backend
      - musicdb-frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # ===========================================
  # MONITORING & LOGGING
  # ===========================================

  prometheus:
    image: quay.io/prometheus/prometheus:latest
    container_name: metrics-prometheus
    restart: always
    ports:
      - "9091:9090"  # Non-standard port
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - musicdb-monitoring
      - musicdb-backend
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  grafana:
    image: public.ecr.aws/bitnami/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3001:3000"  # Non-standard port
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource,grafana-metricsdrilldown-app,grafana-lokiexplore-app,grafana-pyroscope-app
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: redis-datasource,grafana-metricsdrilldown-app,grafana-lokiexplore-app,grafana-pyroscope-app
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - musicdb-monitoring
      - musicdb-backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: logging-elasticsearch
    restart: always
    ports:
      - "9201:9200"  # Non-standard port
      - "9301:9300"  # Non-standard port
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - musicdb-monitoring
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: logging-kibana
    restart: always
    ports:
      - "5602:5601"  # Non-standard port
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    depends_on:
      - elasticsearch
    networks:
      - musicdb-monitoring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:5601/api/status || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 180s

  # ===========================================
  # ADDITIONAL MONITORING SERVICES
  # ===========================================

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node-exporter
    restart: always
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/host/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host/rootfs:ro
    networks:
      - musicdb-monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    restart: always
    ports:
      - "8089:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - musicdb-monitoring
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    restart: always
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass}@postgres:5432/musicdb?sslmode=disable"
    depends_on:
      - postgres
    networks:
      - musicdb-backend
      - musicdb-monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  redis-exporter:
    image: quay.io/oliver006/redis_exporter:latest
    container_name: redis-exporter
    restart: always
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "redis://redis:6379"
    depends_on:
      - redis
    networks:
      - musicdb-backend
      - musicdb-monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # ===========================================
  # FRONTEND
  # ===========================================

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: songnodes-frontend
    restart: always
    ports:
      - "3006:80"
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://api-gateway:8080}
      VITE_VISUALIZATION_API_URL: ${VITE_VISUALIZATION_API_URL:-http://graph-visualization-api:8084}
      VITE_WS_URL: ${VITE_WS_URL:-ws://websocket-api:8083}
      NODE_ENV: production
    depends_on:
      - api-gateway
      - enhanced-visualization-service
    networks:
      - musicdb-frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:3006"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ===========================================
  # SUPPORT SERVICES
  # ===========================================

  nginx:
    image: public.ecr.aws/nginx/nginx:alpine
    container_name: nginx-proxy
    restart: always
    ports:
      - "8443:443"  # Non-standard HTTPS port
      - "8088:80"   # Non-standard HTTP port
    volumes:
      - ./nginx/nginx-simple.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html:ro
    depends_on:
      - api-gateway
      - grafana
      - websocket-api
      - kibana
    networks:
      - musicdb-frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: quay.io/minio/minio:latest
    container_name: object-storage
    restart: always
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - musicdb-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

# ===========================================
# NETWORKS
# ===========================================

networks:
  musicdb-backend:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1
    driver_opts:
      com.docker.network.bridge.name: musicdb-backend
      com.docker.network.driver.mtu: 1500
      com.docker.network.bridge.enable_ip_masquerade: 'true'

  musicdb-frontend:
    driver: bridge

  musicdb-monitoring:
    driver: bridge

# ===========================================
# VOLUMES
# ===========================================

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  rabbitmq_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/rabbitmq
  elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/elasticsearch
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/minio
  nlp_models:
    driver: local
  ollama_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/ollama
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/nginx