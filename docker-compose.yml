services:
  postgres:
    image: public.ecr.aws/docker/library/postgres:15-alpine
    container_name: musicdb-postgres
    restart: always
    ports:
    - 5433:5432
    environment:
      POSTGRES_DB: musicdb
      POSTGRES_USER: musicdb_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}
      POSTGRES_INITDB_ARGS: --encoding=UTF8 --locale=en_US.UTF-8
    volumes:
    - postgres_data:/var/lib/postgresql/data
    - ./sql/init:/docker-entrypoint-initdb.d
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U musicdb_user -d musicdb
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
  db-connection-pool:
    build:
      context: ./services
      dockerfile: db-connection-pool/Dockerfile
    container_name: musicdb-connection-pool
    restart: always
    ports:
    - 6433:6432
    - 8025:8025
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: musicdb_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}
      POSTGRES_DB: musicdb
      PGBOUNCER_ADMIN_USER: pgbouncer
      PGBOUNCER_ADMIN_PASSWORD: ${PGBOUNCER_ADMIN_PASSWORD:-pgbouncer_admin_pass_2024}
    depends_on:
    - postgres
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8025/health
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
  redis:
    image: public.ecr.aws/docker/library/redis:7-alpine
    container_name: musicdb-redis
    restart: always
    ports:
    - 6380:6379
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 2048mb --maxmemory-policy allkeys-lru
      --maxclients 10000 --tcp-keepalive 60
    volumes:
    - redis_data:/data
    networks:
    - musicdb-backend
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test:
      - CMD
      - sh
      - -c
      - redis-cli -a $$REDIS_PASSWORD ping | grep PONG
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
  rabbitmq:
    image: public.ecr.aws/docker/library/rabbitmq:3.12-management-alpine
    container_name: musicdb-rabbitmq
    restart: always
    ports:
    - 5673:5672
    - 15673:15672
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-musicdb}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-rabbitmq_secure_pass_2024}
      RABBITMQ_DEFAULT_VHOST: musicdb
    volumes:
    - rabbitmq_data:/var/lib/rabbitmq
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - rabbitmq-diagnostics
      - check_running
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
  scraper-orchestrator:
    build:
      context: ./services/scraper-orchestrator
      dockerfile: Dockerfile
    container_name: scraper-orchestrator
    restart: always
    ports:
    - 8001:8001
    volumes:
    - ./scrapers/target_tracks_for_scraping.json:/app/target_tracks_for_scraping.json:ro
    - ./scrapers:/app/scrapers:ro
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_pass_2024}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      DATABASE_URL: postgresql+asyncpg://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      SETLISTFM_API_KEY: ${SETLISTFM_API_KEY}
      SCRAPERS_DIR: /app/scrapers
      # API enrichment credentials
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      LASTFM_API_KEY: ${LASTFM_API_KEY}
      MUSICBRAINZ_USER_AGENT: ${MUSICBRAINZ_USER_AGENT}
      DISCOGS_TOKEN: ${DISCOGS_TOKEN}
    depends_on:
    - postgres
    - redis
    - rabbitmq
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8001/healthz
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  dlq-manager:
    build:
      context: ./services
      dockerfile: dlq-manager/Dockerfile
    container_name: dlq-manager
    restart: always
    ports:
    - 8024:8024
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-musicdb}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-rabbitmq_secure_pass_2024}
      RABBITMQ_VHOST: musicdb
    depends_on:
    - rabbitmq
    networks:
    - musicdb-backend
    - musicdb-monitoring
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8024/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
  scraper-1001tracklists:
    build:
      context: ./scrapers
      dockerfile: Dockerfile.1001tracklists
    restart: always
    ports:
    - '8011:8011'
    volumes:
    - ./scrapers/target_tracks_for_scraping.json:/app/target_tracks_for_scraping.json:ro
    - /tmp/.X11-unix:/tmp/.X11-unix:rw
    environment:
      SCRAPER_NAME: 1001tracklists
      REDIS_HOST: redis
      REDIS_PORT: 6379
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      NLP_PROCESSOR_URL: http://nlp-processor:8021
      ENABLE_NLP_FALLBACK: ${ENABLE_NLP_FALLBACK:-true}
      NLP_FALLBACK_TIMEOUT: 60
      # Metadata enrichment service (delegation mode)
      METADATA_ENRICHMENT_URL: http://metadata-enrichment:8020
      # Database credentials for loading API keys
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}
      API_KEY_ENCRYPTION_SECRET: ${API_KEY_ENCRYPTION_SECRET:-songnodes_change_in_production_2024}
      # 1001tracklists authentication credentials
      TRACKLISTS_1001_USERNAME: ${TRACKLISTS_1001_USERNAME}
      TRACKLISTS_1001_PASSWORD: ${TRACKLISTS_1001_PASSWORD}
      # Default to headless for automated scraping (set to False for manual CAPTCHA solving)
      TRACKLISTS_1001_HEADLESS: ${TRACKLISTS_1001_HEADLESS:-True}
      # X11 forwarding for manual CAPTCHA solving (only needed when HEADLESS=False)
      DISPLAY: ${DISPLAY:-:1}
    depends_on:
    - scraper-orchestrator
    - nlp-processor
    - metadata-enrichment
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8011/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  scraper-mixesdb:
    build:
      context: ./scrapers
      dockerfile: Dockerfile.mixesdb
    restart: always
    ports:
    - '8012:8012'
    volumes:
    - ./scrapers/target_tracks_for_scraping.json:/app/target_tracks_for_scraping.json:ro
    environment:
      SCRAPER_NAME: mixesdb
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}
      CONCURRENT_REQUESTS: 6
      DOWNLOAD_DELAY: 1.5
      NLP_PROCESSOR_URL: http://nlp-processor:8021
      ENABLE_NLP_FALLBACK: ${ENABLE_NLP_FALLBACK:-true}
      NLP_FALLBACK_TIMEOUT: 60
      # Metadata enrichment service (delegation mode)
      METADATA_ENRICHMENT_URL: http://metadata-enrichment:8020
    depends_on:
    - scraper-orchestrator
    - nlp-processor
    - metadata-enrichment
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8012/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  scraper-setlistfm:
    build:
      context: ./scrapers
      dockerfile: Dockerfile.setlistfm
    restart: always
    ports:
    - '8013:8013'
    environment:
      SCRAPER_NAME: setlistfm
      SETLISTFM_API_KEY: ${SETLISTFM_API_KEY:-}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}
      API_KEY_ENCRYPTION_SECRET: ${API_KEY_ENCRYPTION_SECRET:-songnodes_change_in_production_2024}
      RATE_LIMIT: 3600
      REQUEST_DELAY: 1
      SKIP_ROBOTS_CHECK: 'true'
      NLP_PROCESSOR_URL: http://nlp-processor:8021
      ENABLE_NLP_FALLBACK: ${ENABLE_NLP_FALLBACK:-true}
      NLP_FALLBACK_TIMEOUT: 60
      # Metadata enrichment service (delegation mode)
      METADATA_ENRICHMENT_URL: http://metadata-enrichment:8020
    depends_on:
    - scraper-orchestrator
    - nlp-processor
    - metadata-enrichment
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8013/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  scraper-reddit:
    build:
      context: ./scrapers
      dockerfile: Dockerfile.reddit
    restart: always
    ports:
    - '8014:8014'
    environment:
      SCRAPER_NAME: reddit
      REDDIT_CLIENT_ID: ${REDDIT_CLIENT_ID:-}
      REDDIT_CLIENT_SECRET: ${REDDIT_CLIENT_SECRET:-}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}
      API_KEY_ENCRYPTION_SECRET: ${API_KEY_ENCRYPTION_SECRET:-songnodes_change_in_production_2024}
      NLP_PROCESSOR_URL: http://nlp-processor:8021
      ENABLE_NLP_FALLBACK: ${ENABLE_NLP_FALLBACK:-true}
      NLP_FALLBACK_TIMEOUT: 60
      # Metadata enrichment service (delegation mode)
      METADATA_ENRICHMENT_URL: http://metadata-enrichment:8020
    depends_on:
    - scraper-orchestrator
    - nlp-processor
    - metadata-enrichment
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8014/health
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  scraper-mixcloud:
    build:
      context: ./scrapers
      dockerfile: Dockerfile.mixcloud
    restart: always
    ports:
    - '8015:8015'
    environment:
      SCRAPER_NAME: mixcloud
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}
      RATE_LIMIT_DELAY: 2.0
      NLP_PROCESSOR_URL: http://nlp-processor:8021
      ENABLE_NLP_FALLBACK: ${ENABLE_NLP_FALLBACK:-true}
      NLP_FALLBACK_TIMEOUT: 60
      # Metadata enrichment service (delegation mode)
      METADATA_ENRICHMENT_URL: http://metadata-enrichment:8020
    depends_on:
    - scraper-orchestrator
    - nlp-processor
    - metadata-enrichment
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8015/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  scraper-soundcloud:
    build:
      context: ./scrapers
      dockerfile: Dockerfile.soundcloud
    restart: always
    ports:
    - '8016:8016'
    environment:
      SCRAPER_NAME: soundcloud
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      NLP_PROCESSOR_URL: http://nlp-processor:8021
      RATE_LIMIT_DELAY: 2.5
    depends_on:
    - scraper-orchestrator
    - nlp-processor
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8016/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  scraper-youtube:
    build:
      context: ./scrapers
      dockerfile: Dockerfile.youtube
    restart: always
    ports:
    - '8017:8017'
    environment:
      SCRAPER_NAME: youtube
      YOUTUBE_API_KEY: ${YOUTUBE_API_KEY:-}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: musicdb
      POSTGRES_USER: musicdb_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      NLP_PROCESSOR_URL: http://nlp-processor:8021
      DAILY_QUOTA_LIMIT: 10000
      API_KEY_ENCRYPTION_SECRET: ${API_KEY_ENCRYPTION_SECRET:-songnodes_change_in_production_2024}
    depends_on:
    - scraper-orchestrator
    - nlp-processor
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8017/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  scraper-internetarchive:
    build:
      context: ./scrapers
      dockerfile: Dockerfile.internetarchive
    restart: always
    ports:
    - '8018:8018'
    environment:
      SCRAPER_NAME: internetarchive
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}
      NLP_PROCESSOR_URL: http://nlp-processor:8021
    depends_on:
    - scraper-orchestrator
    - nlp-processor
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8018/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  scraper-livetracklist:
    build:
      context: ./scrapers
      dockerfile: Dockerfile.livetracklist
    restart: always
    ports:
    - '8019:8019'
    environment:
      SCRAPER_NAME: livetracklist
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      RATE_LIMIT_DELAY: 2.0
      NLP_PROCESSOR_URL: http://nlp-processor:8021
      ENABLE_NLP_FALLBACK: ${ENABLE_NLP_FALLBACK:-true}
      NLP_FALLBACK_TIMEOUT: 60
      # Metadata enrichment service (delegation mode)
      METADATA_ENRICHMENT_URL: http://metadata-enrichment:8020
    depends_on:
    - scraper-orchestrator
    - nlp-processor
    - metadata-enrichment
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8019/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  scraper-residentadvisor:
    build:
      context: ./scrapers
      dockerfile: Dockerfile.residentadvisor
    restart: always
    ports:
    - '8023:8023'
    environment:
      SCRAPER_NAME: residentadvisor
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      RATE_LIMIT_DELAY: 2.0
      NLP_PROCESSOR_URL: http://nlp-processor:8021
      ENABLE_NLP_FALLBACK: ${ENABLE_NLP_FALLBACK:-true}
      NLP_FALLBACK_TIMEOUT: 60
      # Metadata enrichment service (delegation mode)
      METADATA_ENRICHMENT_URL: http://metadata-enrichment:8020
    depends_on:
    - scraper-orchestrator
    - nlp-processor
    - metadata-enrichment
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8023/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  data-transformer:
    build:
      context: ./services
      dockerfile: data-transformer/Dockerfile
    restart: unless-stopped
    expose:
    - '8002'
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_pass_2024}
      POSTGRES_HOST: db-connection-pool
      POSTGRES_PORT: 6432
      POSTGRES_DB: musicdb
      POSTGRES_USER: musicdb_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}
      BATCH_SIZE: 100
      LOG_LEVEL: INFO
      DB_RECONNECT_ENABLED: "true"
      DB_RECONNECT_MAX_RETRIES: 5
      DB_RECONNECT_INTERVAL: 5
    depends_on:
      postgres:
        condition: service_healthy
      db-connection-pool:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8002/health
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
  raw-data-processor:
    build:
      context: .
      dockerfile: scrapers/Dockerfile.raw_data_processor
    container_name: raw-data-processor
    restart: always
    environment:
      # Secrets manager expects these names
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: musicdb_user
      POSTGRES_DB: musicdb
      # Also provide database-specific names for compatibility
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: musicdb
      DATABASE_USER: musicdb_user
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      PROCESSING_INTERVAL: 30
      BATCH_SIZE: 200
      LOG_LEVEL: INFO
    depends_on:
      postgres:
        condition: service_healthy
    networks:
    - musicdb-backend
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  nlp-processor:
    build:
      context: ./services/nlp-processor
      dockerfile: Dockerfile
    container_name: nlp-processor
    restart: always
    ports:
    - 8021:8021
    environment:
      MODEL_PATH: /models
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
    volumes:
    - nlp_models:/models
    depends_on:
    - redis
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD-SHELL
      - python -c 'import urllib.request; urllib.request.urlopen("http://127.0.0.1:8021/health")'
        || exit 1
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 180s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '1.0'
          memory: 1.5G
  data-validator:
    build:
      context: ./services
      dockerfile: data-validator/Dockerfile
    container_name: data-validator
    restart: unless-stopped
    ports:
    - 8003:8003
    environment:
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_pass_2024}
      POSTGRES_HOST: db-connection-pool
      POSTGRES_PORT: 6432
      POSTGRES_DB: musicdb
      POSTGRES_USER: musicdb_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      VALIDATION_BATCH_SIZE: 100
      VALIDATION_WORKERS: 4
      DB_RECONNECT_ENABLED: "true"
      DB_RECONNECT_MAX_RETRIES: 5
      DB_RECONNECT_INTERVAL: 5
    depends_on:
      postgres:
        condition: service_healthy
      db-connection-pool:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8003/health
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.75'
          memory: 768M
  audio-analysis:
    build:
      context: ./services/audio-analysis
      dockerfile: Dockerfile
    container_name: audio-analysis
    restart: always
    ports:
    - 8020:8020
    environment:
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-musicdb}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-rabbitmq_secure_pass_2024}
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
    depends_on:
    - postgres
    - db-connection-pool
    - redis
    - rabbitmq
    - minio
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8020/health
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
  metadata-enrichment:
    build:
      context: ./services/metadata-enrichment
      dockerfile: Dockerfile
    container_name: metadata-enrichment
    restart: always
    ports:
    - 8022:8020
    environment:
      DATABASE_URL: postgresql+asyncpg://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      API_KEY_ENCRYPTION_SECRET: ${API_KEY_ENCRYPTION_SECRET:-songnodes_change_in_production_2024}
      # Spotify API credentials from .env
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      # NOTE: External API keys (Spotify, Discogs, Last.fm, etc.) should be configured
      # through the frontend Settings panel. They are stored encrypted in the database.
      # Environment variables are only used as fallback if database keys are not set.
    depends_on:
    - postgres
    - db-connection-pool
    - redis
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8020/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  api-gateway-internal:
    build:
      context: .
      dockerfile: ./services/api-gateway-internal/Dockerfile
    container_name: api-gateway-internal
    restart: always
    ports:
    - 8100:8100
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}
      PROMETHEUS_MULTIPROC_DIR: /tmp/prometheus
      # OpenTelemetry / Distributed Tracing
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4317
      ENVIRONMENT: ${ENVIRONMENT:-production}
      # API credentials for external services
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      LASTFM_API_KEY: ${LASTFM_API_KEY}
      MUSICBRAINZ_USER_AGENT: ${MUSICBRAINZ_USER_AGENT:-SongNodes/1.0}
      DISCOGS_TOKEN: ${DISCOGS_TOKEN}
    depends_on:
    - redis
    - tempo
    networks:
    - musicdb-backend
    - musicdb-monitoring
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8100/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  ollama:
    image: ollama/ollama:latest
    container_name: ollama-ai
    restart: always
    runtime: nvidia
    ports:
    - 11434:11434
    environment:
    - OLLAMA_HOST=0.0.0.0
    - OLLAMA_ORIGINS=*
    - NVIDIA_VISIBLE_DEVICES=all
    - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    volumes:
    - ollama_data:/root/.ollama
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - /bin/sh
      - -c
      - ollama list > /dev/null 2>&1 || exit 1
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
          devices:
          - driver: nvidia
            count: 1
            capabilities:
            - gpu
  browser-collector:
    build:
      context: ./services/browser-collector
      dockerfile: Dockerfile
    container_name: browser-collector
    restart: always
    ports:
    - 8030:8030
    environment:
      DATABASE_URL: postgresql+asyncpg://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      OLLAMA_URL: http://ollama:11434
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}
      POSTGRES_USER: musicdb_user
      POSTGRES_DB: musicdb
      POSTGRES_HOST: db-connection-pool
      POSTGRES_PORT: 6432
      # Production tuning settings
      MAX_CONCURRENT_BROWSERS: ${MAX_CONCURRENT_BROWSERS:-3}
      COLLECTION_TIMEOUT_SECONDS: ${COLLECTION_TIMEOUT_SECONDS:-300}
      SCREENSHOT_RETENTION_DAYS: ${SCREENSHOT_RETENTION_DAYS:-7}
    volumes:
    - browser_screenshots:/app/screenshots
    depends_on:
    - postgres
    - db-connection-pool
    - redis
    - ollama
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - python
      - -c
      - "import urllib.request; urllib.request.urlopen('http://127.0.0.1:8030/health')"
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    restart: always
    ports:
    - 8080:8080
    environment:
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RATE_LIMIT_ENABLED: 'true'
      RATE_LIMIT_REQUESTS: 100
      RATE_LIMIT_WINDOW: 60
    depends_on:
    - rest-api
    - graphql-api
    - websocket-api
    - graph-visualization-api
    - enhanced-visualization-service
    networks:
    - musicdb-backend
    - musicdb-frontend
    healthcheck:
      test:
      - CMD
      - wget
      - --no-verbose
      - --tries=1
      - --spider
      - http://127.0.0.1:8080/health
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
  rest-api:
    build:
      context: ./services
      dockerfile: rest-api/Dockerfile
    restart: always
    ports:
    - 8082:8082
    environment:
      # Database configuration for secrets_manager
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: musicdb_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}
      POSTGRES_DB: musicdb
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      API_VERSION: v1
      CONNECTION_POOL_SIZE: 50
      # Music Service OAuth Credentials
      TIDAL_CLIENT_ID: ${TIDAL_CLIENT_ID}
      TIDAL_CLIENT_SECRET: ${TIDAL_CLIENT_SECRET}
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      MAX_OVERFLOW: 20
      API_KEY_ENCRYPTION_SECRET: ${API_KEY_ENCRYPTION_SECRET:-songnodes_change_in_production_2024}
    depends_on:
    - postgres
    - redis
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD-SHELL
      - python -c 'import urllib.request; urllib.request.urlopen("http://127.0.0.1:8082/health")'
        || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.75'
          memory: 768M
  graphql-api:
    build:
      context: ./services
      dockerfile: graphql-api/Dockerfile
    container_name: graphql-api
    restart: always
    ports:
    - 8081:8081
    environment:
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      ENABLE_PLAYGROUND: ${ENABLE_PLAYGROUND:-false}
      QUERY_COMPLEXITY_LIMIT: 1000
      QUERY_DEPTH_LIMIT: 15
    depends_on:
    - postgres
    - redis
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8081/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
  websocket-api:
    build:
      context: ./services
      dockerfile: websocket-api/Dockerfile
    container_name: websocket-api
    restart: always
    ports:
    - 8083:8083
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-musicdb}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-rabbitmq_secure_pass_2024}
      RABBITMQ_VHOST: musicdb
      WS_MAX_CONNECTIONS: 10000
      WS_HEARTBEAT_INTERVAL: 30
    depends_on:
    - redis
    - rabbitmq
    networks:
    - musicdb-backend
    - musicdb-frontend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8083/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.75'
          memory: 768M
  graph-visualization-api:
    build:
      context: ./services/graph-visualization-api
      dockerfile: Dockerfile
    container_name: graph-visualization-api
    restart: always
    ports:
    - 8084:8084
    environment:
      DATABASE_URL: postgresql+asyncpg://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      REDIS_HOST: musicdb-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_pass_2024}
      CACHE_TTL: 300
      MAX_CONNECTIONS: 1000
      CONNECTION_POOL_SIZE: 20
      CONNECTION_POOL_MAX_OVERFLOW: 10
    depends_on:
    - postgres
    - redis
    networks:
    - musicdb-backend
    - musicdb-frontend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8084/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
  enhanced-visualization-service:
    build:
      context: ./services/enhanced-visualization-service
      dockerfile: Dockerfile
    container_name: enhanced-visualization-service
    restart: always
    ports:
    - 8090:8085
    environment:
      DATABASE_URL: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@db-connection-pool:6432/musicdb
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_pass_2024}
      NODE_ENV: production
      LOG_LEVEL: info
      CACHE_TTL: 300
      MAX_CONNECTIONS: 1000
      WS_HEARTBEAT_INTERVAL: 30
      CORS_ORIGIN: '*'
      RATE_LIMIT_MAX: 100
      RATE_LIMIT_WINDOW: 60000
    depends_on:
    - postgres
    - redis
    - db-connection-pool
    networks:
    - musicdb-backend
    - musicdb-frontend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:8085/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
  prometheus:
    image: quay.io/prometheus/prometheus:latest
    container_name: metrics-prometheus
    restart: always
    ports:
    - 9091:9090
    volumes:
    - ./monitoring/prometheus:/etc/prometheus
    - ./observability/alerting:/etc/prometheus/alerts
    - prometheus_data:/prometheus
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --storage.tsdb.retention.time=30d
    - --storage.tsdb.retention.size=10GB
    - --web.console.libraries=/usr/share/prometheus/console_libraries
    - --web.console.templates=/usr/share/prometheus/consoles
    - --web.enable-lifecycle
    depends_on:
    - alertmanager
    networks:
    - musicdb-monitoring
    - musicdb-backend
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  alertmanager:
    image: quay.io/prometheus/alertmanager:latest
    container_name: alertmanager
    restart: always
    ports:
    - 9093:9093
    volumes:
    - ./observability/alerting/alertmanager.yaml:/etc/alertmanager/alertmanager.yml
    - alertmanager_data:/alertmanager
    command:
    - --config.file=/etc/alertmanager/alertmanager.yml
    - --storage.path=/alertmanager
    - --web.external-url=http://localhost:9093
    - --cluster.advertise-address=0.0.0.0:9093
    networks:
    - musicdb-monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test:
      - CMD
      - wget
      - --no-verbose
      - --tries=1
      - --spider
      - http://127.0.0.1:9093/-/healthy
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana
    restart: always
    user: 472:472
    ports:
    - 3001:3000
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: redis-datasource
      GF_FEATURE_TOGGLES_ENABLE: traceqlEditor
      GF_LOG_LEVEL: info
      GF_AUTH_ANONYMOUS_ENABLED: 'true'
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_SERVER_ROOT_URL: http://localhost:3001/
      GF_SERVER_DOMAIN: localhost
    volumes:
    - grafana_data:/var/lib/grafana
    - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    - ./observability/grafana-datasources:/etc/grafana/provisioning/datasources:ro
    - ./observability/grafana-dashboards:/etc/grafana/provisioning/dashboards/observability:ro
    depends_on:
    - prometheus
    - loki
    - tempo
    networks:
    - musicdb-monitoring
    - musicdb-backend
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://127.0.0.1:3000/api/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    container_name: otel-collector
    restart: always
    ports:
    - 4317:4317
    - 4318:4318
    - 8889:8889
    - 13133:13133
    - 1777:1777
    volumes:
    - ./observability/otel-collector-config.yaml:/etc/otelcol-contrib/otel-collector-config.yaml:ro
    - /var/log:/var/log:ro
    - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
    - --config=/etc/otelcol-contrib/otel-collector-config.yaml
    networks:
    - musicdb-monitoring
    - musicdb-backend
    depends_on:
    - tempo
    - loki
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    # Healthcheck disabled - otel-collector uses distroless image without shell
    # Service is non-critical for core functionality
  tempo:
    image: grafana/tempo:2.3.1
    container_name: tempo
    restart: always
    ports:
    - 3200:3200
    - 14317:4317
    command:
    - -config.file=/etc/tempo/config.yaml
    - -target=all
    volumes:
    - ./observability/tempo-config.yaml:/etc/tempo/config.yaml
    - tempo_data:/var/tempo
    networks:
    - musicdb-monitoring
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test:
      - CMD
      - wget
      - --no-verbose
      - --tries=1
      - --spider
      - http://127.0.0.1:3200/ready
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  loki:
    image: grafana/loki:2.9.4
    container_name: loki
    restart: always
    ports:
    - 3100:3100
    command:
    - --config.file=/etc/loki/local-config.yaml
    - --target=all
    volumes:
    - loki_data:/loki
    - ./observability/loki-config.yaml:/etc/loki/local-config.yaml
    networks:
    - musicdb-monitoring
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test:
      - CMD
      - wget
      - --no-verbose
      - --tries=1
      - --spider
      - http://127.0.0.1:3100/ready
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  promtail:
    image: grafana/promtail:2.9.4
    container_name: promtail
    restart: always
    volumes:
    - /var/log:/var/log:ro
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - ./observability/promtail-config.yaml:/etc/promtail/config.yml:ro
    command:
    - --config.file=/etc/promtail/config.yml
    networks:
    - musicdb-monitoring
    depends_on:
    - loki
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node-exporter
    restart: always
    ports:
    - 9100:9100
    command:
    - --path.procfs=/host/proc
    - --path.rootfs=/host/rootfs
    - --path.sysfs=/host/sys
    - --collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)
    - --no-collector.hwmon
    volumes:
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /:/host/rootfs:ro
    networks:
    - musicdb-monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    restart: always
    ports:
    - 8089:8080
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:ro
    - /sys:/sys:ro
    - /var/lib/docker:/var/lib/docker:ro
    - /dev/disk:/dev/disk:ro
    privileged: true
    devices:
    - /dev/kmsg:/dev/kmsg
    networks:
    - musicdb-monitoring
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    restart: always
    ports:
    - 9187:9187
    environment:
      DATA_SOURCE_NAME: postgresql://musicdb_user:${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}@postgres:5432/musicdb?sslmode=disable
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musicdb_secure_pass_2024}
      # Disable config file to use default comprehensive metrics
      PG_EXPORTER_DISABLE_DEFAULT_METRICS: "false"
      PG_EXPORTER_DISABLE_SETTINGS_METRICS: "false"
    volumes:
    - ./monitoring/postgres_exporter.yml:/postgres_exporter.yml:ro
    command:
    - --no-collector.stat_statements
    - --no-collector.long_running_transactions
    - --collector.statio_user_tables
    - --collector.database_wraparound
    depends_on:
    - postgres
    networks:
    - musicdb-backend
    - musicdb-monitoring
    healthcheck:
      test:
      - CMD
      - wget
      - --no-verbose
      - --tries=1
      - --spider
      - http://127.0.0.1:9187/metrics
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
  redis-exporter:
    image: quay.io/oliver006/redis_exporter:latest
    container_name: redis-exporter
    restart: always
    ports:
    - 9121:9121
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_pass_2024}
    depends_on:
    - redis
    networks:
    - musicdb-backend
    - musicdb-monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: songnodes-frontend
    restart: always
    ports:
    - 3006:80
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://api-gateway:8080}
      VITE_VISUALIZATION_API_URL: ${VITE_VISUALIZATION_API_URL:-http://graph-visualization-api:8084}
      VITE_WS_URL: ${VITE_WS_URL:-ws://websocket-api:8083}
      NODE_ENV: production
    depends_on:
    - api-gateway
    - enhanced-visualization-service
    networks:
    - musicdb-frontend
    - musicdb-monitoring
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:80
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  nginx:
    image: public.ecr.aws/nginx/nginx:alpine
    container_name: nginx-proxy
    restart: always
    ports:
    - 8443:443
    - 8088:80
    volumes:
    - ./nginx/nginx-simple.conf:/etc/nginx/nginx.conf:ro
    - ./nginx/ssl:/etc/nginx/ssl:ro
    - ./static:/usr/share/nginx/html:ro
    depends_on:
      api-gateway:
        condition: service_healthy
      grafana:
        condition: service_healthy
      websocket-api:
        condition: service_healthy
    networks:
    - musicdb-frontend
    - musicdb-monitoring
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:80/health
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.5'
          memory: 128M
  minio:
    image: quay.io/minio/minio:latest
    container_name: object-storage
    restart: always
    ports:
    - 9000:9000
    - 9001:9001
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
    - minio_data:/data
    networks:
    - musicdb-backend
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://127.0.0.1:9000/minio/health/live
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
networks:
  musicdb-backend:
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 172.28.0.0/16
        gateway: 172.28.0.1
    driver_opts:
      com.docker.network.bridge.name: musicdb-backend
      com.docker.network.driver.mtu: 1500
      com.docker.network.bridge.enable_ip_masquerade: 'true'
  musicdb-frontend:
    driver: bridge
  musicdb-monitoring:
    driver: bridge
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  rabbitmq_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/rabbitmq
  tempo_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/tempo
  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/loki
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  alertmanager_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/alertmanager
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/minio
  nlp_models:
    driver: local
  ollama_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/ollama
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/nginx
  browser_screenshots:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/browser-screenshots
