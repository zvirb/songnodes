---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
  namespace: songnodes
  labels:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/component: message-queue
spec:
  type: ClusterIP
  ports:
    - port: 5672
      targetPort: 5672
      protocol: TCP
      name: amqp
    - port: 15672
      targetPort: 15672
      protocol: TCP
      name: management
  selector:
    app.kubernetes.io/name: rabbitmq
  clusterIP: None  # Headless for StatefulSet
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: songnodes
  labels:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/component: message-queue
spec:
  serviceName: rabbitmq-service
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        app.kubernetes.io/component: message-queue
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3.12-management-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 15672
              name: management
              protocol: TCP
          env:
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                configMapKeyRef:
                  name: songnodes-config
                  key: RABBITMQ_USER
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  name: songnodes-secrets
                  key: RABBITMQ_PASS
            - name: RABBITMQ_DEFAULT_VHOST
              value: "/"
            - name: RABBITMQ_ERLANG_COOKIE
              value: "songnodes-secret-cookie"
          volumeMounts:
            - name: rabbitmq-data
              mountPath: /var/lib/rabbitmq
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          livenessProbe:
            exec:
              command:
                - rabbitmq-diagnostics
                - -q
                - ping
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - rabbitmq-diagnostics
                - -q
                - check_port_connectivity
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
  volumeClaimTemplates:
    - metadata:
        name: rabbitmq-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
        # storageClassName: standard  # Uncomment and specify your storage class