---
# Default deny all ingress traffic (security baseline)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: songnodes
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
---
# Allow DNS resolution (required for service discovery)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns
  namespace: songnodes
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
---
# Allow frontend to communicate with APIs
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-to-apis
  namespace: songnodes
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: frontend
  policyTypes:
    - Egress
  egress:
    # Allow DNS
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
    # Allow access to REST API
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: rest-api
      ports:
        - protocol: TCP
          port: 8082
    # Allow access to Graph API
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: graph-visualization
      ports:
        - protocol: TCP
          port: 8084
    # Allow access to WebSocket API
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: websocket-api
      ports:
        - protocol: TCP
          port: 8083
---
# Allow ingress controller to reach frontend
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-to-frontend
  namespace: songnodes
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: frontend
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx  # Adjust based on your ingress controller namespace
      ports:
        - protocol: TCP
          port: 80
---
# Allow ingress controller to reach APIs
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-to-apis
  namespace: songnodes
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: backend
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8082  # REST API
        - protocol: TCP
          port: 8083  # WebSocket API
        - protocol: TCP
          port: 8084  # Graph API
        - protocol: TCP
          port: 8085  # Scraper Orchestrator
        - protocol: TCP
          port: 8086  # NLP Processor
---
# Allow backend services to access PostgreSQL
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-to-postgres
  namespace: songnodes
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: postgres
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: backend
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: scraper
      ports:
        - protocol: TCP
          port: 5432
---
# Allow backend services to access Redis
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-to-redis
  namespace: songnodes
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: backend
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: scraper
      ports:
        - protocol: TCP
          port: 6379
---
# Allow backend services to access RabbitMQ
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-to-rabbitmq
  namespace: songnodes
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: backend
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: scraper
      ports:
        - protocol: TCP
          port: 5672  # AMQP
        - protocol: TCP
          port: 15672  # Management UI
---
# Allow Prometheus to scrape metrics from all pods
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: prometheus-scraping
  namespace: songnodes
spec:
  podSelector: {}
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 9090  # Metrics port
---
# Allow Prometheus egress to scrape targets
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: prometheus-egress
  namespace: songnodes
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  policyTypes:
    - Egress
  egress:
    # Allow DNS
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
    # Allow scraping all pods
    - to:
        - podSelector: {}
      ports:
        - protocol: TCP
          port: 9090
    # Allow Kubernetes API access
    - to:
        - namespaceSelector: {}
          podSelector:
            matchLabels:
              component: apiserver
      ports:
        - protocol: TCP
          port: 443
---
# Allow Grafana to access Prometheus
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: grafana-to-prometheus
  namespace: songnodes
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: grafana
  policyTypes:
    - Egress
  egress:
    # Allow DNS
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
    # Allow Prometheus access
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 9090
---
# Allow backend services egress to external APIs (internet)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-internet-egress
  namespace: songnodes
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: backend
  policyTypes:
    - Egress
  egress:
    # Allow DNS
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
    # Allow HTTPS to external services (Spotify, LastFM, etc.)
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 443
    # Allow HTTP (for some APIs that don't support HTTPS)
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 80
---
# Allow scrapers egress to external websites
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: scraper-internet-egress
  namespace: songnodes
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: scraper
  policyTypes:
    - Egress
  egress:
    # Allow DNS
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
    # Allow all HTTP/HTTPS egress for scraping
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 443